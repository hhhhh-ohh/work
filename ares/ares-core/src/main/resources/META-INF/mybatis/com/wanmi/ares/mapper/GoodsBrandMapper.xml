<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.wanmi.ares.report.goods.dao.GoodsBrandMapper" >

    <sql id="commonAddColSql">
      SHOP_ID,BRAND_ID,ORDER_COUNT,ORDER_MONEY,ORDER_NUM,PAY_COUNT,PAY_MONEY,PAY_NUM,REFUND_COUNT,REFUND_MONEY,REFUND_NUM,CREATE_TM,CUSTOMER_COUNT,CUSTOMER_PAY_COUNT
    </sql>

    <sql id="commonWhereSql">
        WHERE
        <!-- 1.当companyId不为0和null的情况下代表查询某个公司,当它为0或null的情况下,代表是boss端发来的请求,此时有几种可能:1.查询总的情况 2.查询门店总的情况 3.查询商家总的情况
             2.storeSelectType == null代表主基线没有这个参数,storeSelectType为ALL代表查询总的情况或某个公司的情况-->
        <if test="(companyId != null and companyId != 0) or (storeSelectType == null or storeSelectType == @com.wanmi.ares.enums.StoreSelectType@ALL)">
            SHOP_ID = #{companyId}
        </if>
        <if test="(companyId == null or companyId == 0) and storeSelectType == @com.wanmi.ares.enums.StoreSelectType@O2O">
            SHOP_ID = #{o2oCompanyId}
        </if>
        <if test="(companyId == null or companyId == 0) and storeSelectType == @com.wanmi.ares.enums.StoreSelectType@SUPPLIER">
            SHOP_ID = -2
        </if>
        <if test="ids != null and ids.size > 0">
            and brand_id in
            <foreach collection="ids" item="item" index="index"  open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>

        <if test="isLeaf != null">
            AND IS_LEAF = #{isLeaf}
        </if>

        <if test="date != null">
            AND STAT_DATE = date_format(#{date},'%Y-%m-%d')
        </if>
        <if test="month != null">
            AND STAT_MONTH = #{month}
        </if>
        <if test="year != null">
            AND STAT_YEAR = #{year}
        </if>
    </sql>

    <sql id="commonQuerySql">
        SELECT
          brand_id AS id,
          ORDER_COUNT AS orderCount,
          ORDER_MONEY AS orderAmt,
          ORDER_NUM AS orderNum,
          PAY_COUNT AS payCount,
          PAY_NUM AS payNum,
          PAY_MONEY AS payAmt,
          REFUND_COUNT AS returnOrderCount,
          REFUND_MONEY AS returnOrderAmt,
          REFUND_NUM AS returnOrderNum,
          SHOP_ID AS companyId,
          CUSTOMER_COUNT as customerCount,
          CUSTOMER_PAY_COUNT as customerPayCount
        <if test="table == 'goods_brand_month'">
            FROM goods_brand_month
        </if>
        <if test="table == 'goods_brand_day'">
            FROM goods_brand_day
        </if>
        <if test="table == 'goods_brand_recent_seven'">
            FROM goods_brand_recent_seven
        </if>
        <if test="table == 'goods_brand_recent_thirty'">
            FROM goods_brand_recent_thirty
        </if>
    </sql>

    <sql id="statisticsQuery">
         select
            companyId,
            brand,
            COALESCE(sum(orderCount),0) orderCount,
            COALESCE(sum(orderPrice),0) orderPrice,
            COALESCE(sum(orderNum),0) orderNum,
            COALESCE(sum(payCount),0) payCount,
            COALESCE(sum(payPrice),0) payPrice,
            COALESCE(sum(payNum),0) payNum,
            COALESCE(sum(returnCount),0) returnCount,
            COALESCE(sum(returnPrice),0) returnPrice,
            COALESCE(sum(returnNum),0) returnNum,
            now(),
            COALESCE(sum(customerCount),0) customerCount,
            COALESCE(sum(customerPayCount),0) customerPayCount
        from(
            
            select
                a.companyId,
                a.brand,
                a.orderCount,
                a.orderPrice,
                a.orderNum,
                0 payCount,
                0 payPrice,
                0 payNum,
                0 returnCount,
                0 returnPrice,
                0 returnNum,
                c.customerCount,
                f.customerPayCount
            from (
                select
                    t.company_id companyId,i.brand brand, count(1) orderCount,sum(level_price*num) orderPrice,sum(num) orderNum
                from replay_trade t
                left join replay_trade_item i on(t.tid=i.tid)
                where t.create_time &gt;= #{beginTime} and t.create_time &lt; #{endTime}
                group by t.company_id,i.brand
            ) a
            left join (
                    select
                        brand,count(customerId) customerCount
                    from (
                        select
                          i.brand brand,t.customer_id customerId
                        from replay_trade t
                        left join replay_trade_item i on(t.tid=i.tid)
                        where t.create_time &gt;= #{beginTime} and t.create_time &lt; #{endTime}
                        group by i.brand,t.customer_id
                    ) tmp group by brand
                )c on(a.brand=c.brand)
                left join (
                    select
                        brand,count(customerId) customerPayCount
                    from (
                        select
                          i.brand brand,t.customer_id customerId
                        from replay_trade t
                        left join replay_trade_item i on(t.tid=i.tid)
                        where t.pay_time &gt;= #{beginTime} and t.pay_time &lt; #{endTime} and t.pay_state=2
                        group by i.brand,t.customer_id
                    ) tmp group by brand
                )f on(a.brand=f.brand)
            union all (
                select
                    t.company_id companyId,
                    i.brand brand,
                    0 orderCount,
                    0 orderPrice,
                    0 orderNum,
                    count(i.id) payCount,
                    IFNULL(sum(i.split_price),0) payPrice,
                    sum(num) payNum,
                    0 returnCount,
                    0 returnPrice,
                    0 returnNum,
                    0 customerCount,
                    0 customerPayCount
                from replay_trade t
                left join replay_trade_item i on(t.tid=i.tid)
                where t.pay_time &gt;= #{beginTime} and t.pay_time &lt; #{endTime} and t.pay_state=2
                group by t.company_id,i.brand
            )
            
            union all
           
            select
                o.company_id companyId,
                i.brand brand,
                0 orderCount,
                0  orderPrice,
                0 orderNum,
                0 payCount,
                0 payPrice,
                0 payNum,
                count(i.id) returnCount,
                sum(i.price*i.num) returnPrice,
                sum(i.num) returnNum,
                0 customerCount,
                0 customerPayCount
            from replay_return_order o
            left join replay_return_item i on(o.rid=i.rid)
            where finish_time &gt;= #{beginTime} and finish_time &lt; #{endTime}
            group by o.company_id,i.brand
        ) g where brand is not null GROUP BY companyId,brand
         
        union all
        
        select
            0 companyId,
            brand,
            COALESCE(sum(orderCount),0) orderCount,
            COALESCE(sum(orderPrice),0) orderPrice,
            COALESCE(sum(orderNum),0) orderNum,
            COALESCE(sum(payCount),0) payCount,
            COALESCE(sum(payPrice),0) payPrice,
            COALESCE(sum(payNum),0) payNum,
            COALESCE(sum(returnCount),0) returnCount,
            COALESCE(sum(returnPrice),0) returnPrice,
            COALESCE(sum(returnNum),0) returnNum,
            now(),
            COALESCE(sum(customerCount),0) customerCount,
            COALESCE(sum(customerPayCount),0) customerPayCount
        from (
            select
                a.brand,
                a.orderCount,
                a.orderPrice,
                a.orderNum,
                0 payCount,
                0 payPrice,
                0 payNum,
                0 returnCount,
                0 returnPrice,
                0 returnNum,
                c.customerCount,
                f.customerPayCount
                from (
                  select i.brand brand, count(1) orderCount,sum(level_price*num) orderPrice,sum(num) orderNum
                from replay_trade t
                left join replay_trade_item i on(t.tid=i.tid)
                where t.create_time &gt;= #{beginTime} and t.create_time &lt; #{endTime}
                group by i.brand
            ) a
            left join (
                    select
                        brand,count(customerId) customerCount
                    from (
                        select
                          i.brand brand,t.customer_id customerId
                        from replay_trade t
                        left join replay_trade_item i on(t.tid=i.tid)
                        where t.create_time &gt;= #{beginTime} and t.create_time &lt; #{endTime}
                        group by i.brand,t.customer_id
                    ) tmp group by brand
                )c on(a.brand=c.brand)
                left join (
                    select
                        brand,count(customerId) customerPayCount
                    from (
                        select
                          i.brand brand,t.customer_id customerId
                        from replay_trade t
                        left join replay_trade_item i on(t.tid=i.tid)
                        where t.pay_time &gt;= #{beginTime} and t.pay_time &lt; #{endTime} and t.pay_state=2
                        group by i.brand,t.customer_id
                    ) tmp group by brand
                )f on(a.brand=f.brand)
            union all (
                select
                    i.brand brand,
                    0 orderCount,
                    0 orderPrice,
                    0 orderNum,
                    count(i.id) payCount,
                    IFNULL(sum(i.split_price),0) payPrice,
                    sum(num) payNum,
                    0 returnCount,
                    0 returnPrice,
                    0 returnNum,
                    0 customerCount,
                    0 customerPayCount
                from replay_trade t
                left join replay_trade_item i on(t.tid=i.tid)
                where t.pay_time&gt;= #{beginTime} and t.pay_time &lt; #{endTime} and t.pay_state=2
                group by i.brand
            )

            union all

            select
                i.brand brand,
                0 orderCount,
                0  orderPrice,
                0 orderNum,
                0 payCount,
                0 payPrice,
                0 payNum,
                count(i.id) returnCount,
                sum(i.price*i.num) returnPrice,
                sum(i.num) returnNum,
                0 customerCount,
                0 customerPayCount
            from replay_return_order o
            left join replay_return_item i on(o.rid=i.rid)
            where finish_time &gt;= #{beginTime} and finish_time &lt; #{endTime}
            group by i.brand
        )g where brand is not null group by brand
    </sql>

    <select id="queryGoodsBrandReport" resultType="com.wanmi.ares.report.goods.model.root.GoodsReport">
        <include refid="commonQuerySql"/>
        <include refid="commonWhereSql"/>
        ORDER BY ${sortCol} ${sortType}, brand_id ASC
        limit #{number}, #{size}
    </select>

    <!--  tableName 传值不是对外请求传入是代码写死的  -->
    <select id="countGoodsBrandReport" resultType="long">
        SELECT COUNT(1)
        <if test="table == 'goods_brand_month'">
            FROM goods_brand_month
        </if>
        <if test="table == 'goods_brand_day'">
            FROM goods_brand_day
        </if>
        <if test="table == 'goods_brand_recent_seven'">
            FROM goods_brand_recent_seven
        </if>
        <if test="table == 'goods_brand_recent_thirty'">
            FROM goods_brand_recent_thirty
        </if>
        <include refid="commonWhereSql"/>
    </select>

    <select id="queryGoodsBrandReportByExport" resultType="com.wanmi.ares.report.goods.model.root.GoodsBrandReport">
        select a.*,
        b.brand_name brandName
        from
        (
        select
        brand_id id,
        sum(order_count) orderCount,
        sum(order_money) orderAmt,
        sum(order_num) orderNum,
        sum(pay_count) payCount,
        sum(pay_money) payAmt,
        sum(pay_num) payNum,
        sum(REFUND_count) returnOrderCount,
        sum(REFUND_money) returnOrderAmt,
        sum(REFUND_num) returnOrderNum,
        COALESCE(sum(CUSTOMER_COUNT),0) customerCount,
        COALESCE(sum(CUSTOMER_PAY_COUNT),0) customerPayCount
        from goods_brand_day report
        <where>
            <if test="begDate!=null">
                and STAT_DATE &gt;=#{begDate}
            </if>
            <if test="endDate != null">
                and stat_date &lt;=#{endDate}
            </if>
            <if test="companyId != null">
                and SHOP_ID = #{companyId}
            </if>
        </where>
        group by brand_id
        ORDER BY  orderAmt DESC
        )a
        left join replay_goods_brand b on(a.id = b.brand_id)
    </select>
    <delete id="delSevenDayReport">
        TRUNCATE TABLE GOODS_BRAND_RECENT_SEVEN
    </delete>

    <delete id="delThirtyDayReport">
        TRUNCATE TABLE GOODS_BRAND_RECENT_THIRTY
    </delete>

    <delete id="delDayReport" parameterType="String">
        DELETE FROM GOODS_BRAND_DAY WHERE STAT_DATE = date_format(#{date},'%Y-%m-%d')
    </delete>

    <delete id="delMonthReport" parameterType="int">
        DELETE FROM GOODS_BRAND_MONTH WHERE STAT_MONTH = #{date}
    </delete>

    <insert id="saveDayReportBySelect">
        insert into goods_brand_day(
          <include refid="commonAddColSql"/>
          ,STAT_DATE,ID
        )
        select statistic.*,#{statDate},CONCAT(#{statDate},',',statistic.companyId,',',statistic.brand)  from (
          <include refid="statisticsQuery"/>
        ) statistic
    </insert>

    <insert id="saveMonthReportBySelect">
        insert into goods_brand_month(
          <include refid="commonAddColSql"/>
          ,STAT_MONTH,ID
        )
        select statistic.*,${statDate},CONCAT(#{statDate},',',statistic.companyId,',',statistic.brand) from (
          <include refid="statisticsQuery"/>
        ) statistic
    </insert>

    <insert id="saveSevenDayReportBySelect">
        insert into goods_brand_recent_seven(
          <include refid="commonAddColSql"/>
        )
        select statistic.* from (
          <include refid="statisticsQuery"/>
        ) statistic
    </insert>

    <insert id="saveThirtyDayReportBySelect">
        insert into goods_brand_recent_thirty(
          <include refid="commonAddColSql"/>
        )
        select statistic.* from (
          <include refid="statisticsQuery"/>
        ) statistic
    </insert>

    <select id="queryByIds" resultType="com.wanmi.ares.source.model.root.GoodsBrand">
        SELECT
            brand_id id,
            brand_name name,
            s.company_info_id companyId
        FROM REPLAY_GOODS_BRAND b
        left join REPLAY_STORE s on (b.store_id = s.store_id)
        WHERE brand_id IN
        <foreach collection="ids" item="item" index="index" separator="," open="(" close=")">
            #{item}
        </foreach>
    </select>
</mapper>