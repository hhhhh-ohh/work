<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wanmi.ares.report.trade.dao.TradeReportMapper">
    <sql id="Base_Column_List">
         date, ORDER_NUM as orderCount,ORDER_USER_NUM as orderNum,ORDER_MONEY as orderAmt,PAY_NUM as PayOrderCount,PAY_USER_NUM as PayOrderNum,
         PAY_MONEY as payOrderAmt,ORDER_CONVERSION as orderConversionRate,PAY_CONVERSION as payOrderConversionRate,ALL_CONVERSION as wholeStoreConversionRate,
         USER_PER_PRICE as customerUnitPrice,ORDER_PER_PRICE as everyUnitPrice,REFUND_NUM as returnOrderCount,REFUND_USER_NUM as returnOrderNum,
         REFUND_MONEY as returnOrderAmt,SHOP_ID as id
    </sql>

    <insert id="saveTrade" parameterType="com.wanmi.ares.report.trade.model.root.TradeReport">
          INSERT INTO trade_day (ID,date,ORDER_NUM,ORDER_USER_NUM,ORDER_MONEY,PAY_NUM,PAY_USER_NUM,PAY_MONEY,ORDER_CONVERSION,PAY_CONVERSION,ALL_CONVERSION,USER_PER_PRICE,ORDER_PER_PRICE,REFUND_NUM,REFUND_USER_NUM,
          REFUND_MONEY,SHOP_ID,CREATE_TM)
          VALUES (CONCAT(#{id}, "-", DATE_FORMAT(#{date}, "%Y%m%d")),#{date},#{orderCount},#{orderNum},#{orderAmt},#{PayOrderCount},#{PayOrderNum},#{payOrderAmt},#{orderConversionRate},#{payOrderConversionRate},#{wholeStoreConversionRate},#{customerUnitPrice},
          #{everyUnitPrice},#{returnOrderCount},#{returnOrderNum},#{returnOrderAmt},#{id},now())
    </insert>

    <select id="queryTrade" parameterType="com.wanmi.ares.report.trade.model.request.TradeReportRequest"
            resultType="com.wanmi.ares.report.trade.model.root.TradeReport">
        SELECT
        <include refid="Base_Column_List"/>
        FROM trade_day
        WHERE
        SHOP_ID = #{companyId} AND date &gt;= #{beginDate} AND date &lt;= #{endDate}
        ORDER BY ${sortName} ${sortOrder}
    </select>

    <select id="queryTradeCount" parameterType="com.wanmi.ares.report.trade.model.request.TradeReportRequest"
            resultType="int">
        SELECT count(ID) FROM trade_day
        WHERE SHOP_ID = #{companyId} AND date &gt;= #{beginDate} AND date &lt;= #{endDate}
    </select>

    <select id="queryTradePage" parameterType="com.wanmi.ares.report.trade.model.request.TradeReportRequest"
            resultType="com.wanmi.ares.report.trade.model.root.TradeReport">
        SELECT
        <include refid="Base_Column_List"/>
        FROM trade_day
        WHERE SHOP_ID = #{companyId} AND date &gt;= #{beginDate} AND date &lt;= #{endDate}
        ORDER BY ${sortName} ${sortOrder}
        LIMIT #{pageNum,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}
    </select>

    <select id="queryStoreTradePage" parameterType="com.wanmi.ares.report.trade.model.request.TradeReportRequest"
            resultType="com.wanmi.ares.report.trade.model.root.TradeReport">

        SELECT
          date, sum(ORDER_NUM) as orderCount,ORDER_USER_NUM as orderNum,sum(ORDER_MONEY) as orderAmt,sum(PAY_NUM) as PayOrderCount,PAY_USER_NUM as PayOrderNum,
         sum(PAY_MONEY) as payOrderAmt,ORDER_CONVERSION as orderConversionRate,PAY_CONVERSION as payOrderConversionRate,ALL_CONVERSION as wholeStoreConversionRate,
         USER_PER_PRICE as customerUnitPrice,ORDER_PER_PRICE as everyUnitPrice,sum(REFUND_NUM) as returnOrderCount,REFUND_USER_NUM as returnOrderNum,
         sum(REFUND_MONEY) as returnOrderAmt,SHOP_ID as id
        FROM trade_day
        WHERE date &gt;= #{beginDate} AND date &lt;= #{endDate} AND id != 0
        GROUP BY SHOP_ID
        ORDER BY #{sortName} #{sortOrder}
        LIMIT #{pageNum,jdbcType=INTEGER},#{pageSize,jdbcType=INTEGER}
    </select>

    <select id="countTradePageByStore" parameterType="com.wanmi.ares.report.trade.model.request.TradeReportRequest"
            resultType="int">
        SELECT count(t.id) FROM
        (SELECT ID FROM trade_day
        WHERE date &gt;= #{beginDate} and date &lt;= #{endDate} AND SHOP_ID != 0
        GROUP BY SHOP_ID) as t
    </select>

    <delete id="deleteTrade" parameterType="java.lang.String">
        DELETE FROM trade_day WHERE ID = #{id,jdbcType=VARCHAR}
    </delete>

    <delete id="clearTradeReport" parameterType="java.lang.String">
        DELETE FROM trade_day WHERE date &lt;= date_format(#{date},'%Y-%m-%d')
    </delete>

    <select id="collectTrade" parameterType="com.wanmi.ares.report.trade.model.request.TradeCollect"
            resultType="com.wanmi.ares.report.trade.model.root.TradeBase">
        SELECT
            SUM(temp.uv) uv,
            SUM(temp.order_num) orderNum,
            SUM(temp.order_user_num) orderUserNum,
            SUM(temp.order_money) orderMoney,
            SUM(temp.pay_num) payNum,
            SUM(temp.pay_user_num) payUserNum,
            SUM(temp.pay_money) payMoney,
            CONVERT(SUM(temp.pay_user_num)/SUM(temp.order_user_num)*100,DECIMAL(10,2)) payConversion,
            CONVERT(SUM(temp.pay_money)/SUM(temp.pay_user_num),DECIMAL(20,2)) userPerPrice,
            CONVERT(SUM(temp.pay_money)/SUM(temp.pay_num),DECIMAL(20,2)) orderPerPrice,
            SUM(temp.refund_num) refundNum,
            SUM(temp.refund_user_num) refundUserNum,
            SUM(temp.refund_money) refundMoney,
            temp.company_id companyId
        FROM (
            SELECT
                0 AS uv,
                SUM(t.order_num) order_num,
                SUM(t.order_user_num) order_user_num,
                SUM(t.order_money) order_money,
                SUM(t.pay_num) pay_num,
                SUM(t.pay_user_num) pay_user_num,
                SUM(t.pay_money) pay_money,
                0 AS refund_num,
                0 AS refund_user_num,
                0 AS refund_money,
                t.company_id  company_id
            FROM (
                SELECT
                    COUNT(1) order_num ,
                    COUNT(DISTINCT(customer_id)) order_user_num,
                    SUM(total_price) order_money,
                    0 AS pay_num,
                    0 AS pay_user_num,
                    0 AS pay_money,
                    company_id
                 FROM `replay_trade` rt
                     <if test="storeType != null and storeType == 2">
                        left join replay_store rs on company_id = rs.company_info_id
                    </if>
                 WHERE DATE_FORMAT(create_time,'%Y-%m-%d') &gt;= #{beginDate}
                    AND  DATE_FORMAT(create_time,'%Y-%m-%d') &lt;= #{endDate}
                    AND company_id IS NOT NULL
                    <if test="storeType != null and storeType == 2">
                        and rs.store_type = #{storeType}
                    </if>
                GROUP BY company_id
                UNION ALL
                SELECT
                    0 AS order_num ,
                    0 AS order_user_num,
                    0 AS order_money,
                    COUNT(1) pay_num,
                    COUNT(DISTINCT customer_id) pay_user_num,
                    SUM(total_price) pay_money,
                    company_id
                 FROM `replay_trade`
                    <if test="storeType != null and storeType == 2">
                        left join replay_store rs on company_id = rs.company_info_id
                    </if>
                 WHERE DATE_FORMAT(pay_time,'%Y-%m-%d') &gt;= #{beginDate}
                   AND DATE_FORMAT(pay_time,'%Y-%m-%d') &lt;= #{endDate}
                   AND pay_state = 2 AND company_id IS NOT NULL
                     <if test="storeType != null and storeType == 2">
                        and rs.store_type = #{storeType}
                     </if>
                GROUP BY company_id )t
             GROUP BY t.company_id
            UNION ALL
             SELECT
                 0 AS uv,
                 0 AS order_num,
                 0 AS order_user_num,
                 0 AS order_money,
                 0 AS pay_num,
                 0 AS pay_user_num,
                 0 AS pay_money,
                 COUNT(1) refund_num,
                 COUNT(DISTINCT customer_id) refund_user_num ,
                 SUM(actual_return_price) refund_money,
                 company_id
              FROM `replay_return_order`
                <if test="storeType != null and storeType == 2">
                        left join replay_store rs on company_id = rs.company_info_id
                </if>
              WHERE return_flow_state = 5
                AND DATE_FORMAT(finish_time,'%Y-%m-%d') &gt;= #{beginDate}
                AND DATE_FORMAT(finish_time,'%Y-%m-%d') &lt;= #{endDate}
                AND company_id IS NOT NULL
                <if test="storeType != null and storeType == 2">
                    and rs.store_type = #{storeType}
                </if>
            GROUP BY company_id
              UNION ALL
                SELECT
                  COUNT(DISTINCT(fdu.user_id)) AS uv,
                   0 AS order_num,
                 0 AS order_user_num,
                 0 AS order_money,
                 0 AS pay_num,
                 0 AS pay_user_num,
                 0 AS pay_money,
                 0 AS refund_num,
                 0 AS refund_user_num,
                 0 AS refund_money,
                 fd.SHOP_ID AS company_id
                FROM
                  flow_day fd
                  LEFT JOIN replay_flow_day_user_info fdu ON fdu.flow_day_id = fd.ID
                    <if test="storeType != null and storeType == 2">
                         left join replay_store rs on fd.SHOP_ID = rs.company_info_id
                    </if>
                  WHERE DATE_FORMAT(fd.DATE,'%Y-%m-%d') &gt;= #{beginDate}
                    AND DATE_FORMAT(fd.DATE,'%Y-%m-%d') &lt;= #{endDate}
                    AND fd.SHOP_ID != 0
                    <if test="storeType != null and storeType == 2">
                        and rs.store_type = #{storeType}
                    </if>
                  GROUP BY fd.SHOP_ID

             )temp GROUP BY temp.company_id
    </select>

    <select id="wechatTradeStatistics" parameterType="com.wanmi.ares.report.trade.model.request.TradeCollect"
            resultType="com.wanmi.ares.report.wechatvideo.model.entity.WechatVideoCompanyBase">
<![CDATA[
        SELECT rs.store_name AS storeName,c.company_info_id AS companyInfoId,IFNULL(videoSaleAmount,0) AS videoSaleAmount,IFNULL(liveSaleAmount,0) AS liveSaleAmount,IFNULL(shopwindowSaleAmount,0) AS shopwindowSaleAmount,IFNULL(videoReturnAmount,0) AS videoReturnAmount,IFNULL(liveReturnAmount,0) AS liveReturnAmount,IFNULL(shopwindowReturnAmount,0) AS shopwindowReturnAmount FROM replay_company_info c LEFT JOIN
            (
                SELECT company_id AS company_info_id,SUM(videoSaleAmount) AS videoSaleAmount,SUM(liveSaleAmount) AS liveSaleAmount, SUM(shopwindowSaleAmount) AS shopwindowSaleAmount,SUM(videoReturnAmount) AS videoReturnAmount,SUM(liveReturnAmount) AS liveReturnAmount, SUM(shopwindowReturnAmount) AS shopwindowReturnAmount
                FROM (
                         SELECT company_id,SUM(videoSaleAmount) AS videoSaleAmount,SUM(liveSaleAmount) AS liveSaleAmount, SUM(shopwindowSaleAmount) AS shopwindowSaleAmount,0 AS videoReturnAmount,0 AS liveReturnAmount, 0 AS shopwindowReturnAmount
                         FROM (
                                  SELECT company_id, IFNULL(SUM(total_price),0) AS videoSaleAmount, 0 AS liveSaleAmount,0 AS shopwindowSaleAmount
                                  FROM replay_trade WHERE sell_platform_type = 0 and pay_state = 2 AND pay_time >=#{beginDate} AND pay_time <#{endDate} GROUP BY company_id
                                  UNION ALL
                                  SELECT company_id,0 AS videoSaleAmount, IFNULL(SUM(total_price),0) AS liveSaleAmount,0 AS shopwindowSaleAmount
                                  FROM replay_trade WHERE sell_platform_type = 0 and scene_group in (1176,1177) and pay_state = 2 AND pay_time >=#{beginDate} AND pay_time <#{endDate} GROUP BY company_id
                                  UNION ALL
                                  SELECT company_id,0 AS videoSaleAmount, 0 AS liveSaleAmount, IFNULL(SUM(total_price) ,0)AS shopwindowSaleAmount
                                  FROM replay_trade WHERE sell_platform_type = 0 and scene_group = 1195 and pay_state = 2 AND pay_time >=#{beginDate} AND pay_time <#{endDate} GROUP BY company_id
                              ) t GROUP BY company_id
                         UNION ALL
                         SELECT company_id, 0 AS videoSaleAmount,0 AS liveSaleAmount,0 AS shopwindowSaleAmount, SUM(videoReturnAmount) AS videoReturnAmount,SUM(liveReturnAmount) AS liveReturnAmount, SUM(shopwindowReturnAmount) AS shopwindowReturnAmount
                         FROM (
                                  SELECT company_id,IFNULL(SUM(actual_return_price),0) AS videoReturnAmount, 0 AS liveReturnAmount,0 AS shopwindowReturnAmount
                                  FROM replay_return_order WHERE sell_platform_type = 0 AND create_time >=#{beginDate} AND create_time <#{endDate} GROUP BY company_id
                                  UNION ALL
                                  SELECT company_id,0 AS videoReturnAmount, IFNULL(SUM(actual_return_price),0) AS liveReturnAmount,0 AS shopwindowReturnAmount
                                  FROM replay_return_order WHERE sell_platform_type = 0 and scene_group in (1176,1177) AND create_time >=#{beginDate} AND create_time <#{endDate} GROUP BY company_id
                                  UNION ALL
                                  SELECT company_id,0 AS videoReturnAmount, 0 AS liveReturnAmount, IFNULL(SUM(actual_return_price) ,0)AS shopwindowReturnAmount
                                  FROM replay_return_order WHERE sell_platform_type = 0 and scene_group = 1195 AND create_time >=#{beginDate} AND create_time <#{endDate} GROUP BY company_id
                              ) r GROUP BY company_id
                     ) s GROUP BY company_id
            ) a ON c.company_info_id = a.company_info_id
        LEFT JOIN replay_store rs ON rs.company_info_id = c.company_info_id
        WHERE c.del_flag = 0
        ]]>
        <if test="companyId != null">
            AND c.company_info_id = #{companyId}
        </if>
        <if test="beginIndex != null and pageSize != null">
            LIMIT #{beginIndex}, #{pageSize}
        </if>
    </select>

    <select id="countWechatTradeStatistics" resultType="java.lang.Integer">
<![CDATA[
        SELECT COUNT(*) FROM (
        SELECT c.company_info_id AS companyInfoId,IFNULL(videoSaleAmount,0) AS videoSaleAmount,IFNULL(liveSaleAmount,0) AS liveSaleAmount,IFNULL(shopwindowSaleAmount,0) AS shopwindowSaleAmount,IFNULL(videoReturnAmount,0) AS videoReturnAmount,IFNULL(liveReturnAmount,0) AS liveReturnAmount,IFNULL(shopwindowReturnAmount,0) AS shopwindowReturnAmount FROM replay_company_info c LEFT JOIN
            (
                SELECT company_id AS company_info_id,SUM(videoSaleAmount) AS videoSaleAmount,SUM(liveSaleAmount) AS liveSaleAmount, SUM(shopwindowSaleAmount) AS shopwindowSaleAmount,SUM(videoReturnAmount) AS videoReturnAmount,SUM(liveReturnAmount) AS liveReturnAmount, SUM(shopwindowReturnAmount) AS shopwindowReturnAmount
                FROM (
                         SELECT company_id,SUM(videoSaleAmount) AS videoSaleAmount,SUM(liveSaleAmount) AS liveSaleAmount, SUM(shopwindowSaleAmount) AS shopwindowSaleAmount,0 AS videoReturnAmount,0 AS liveReturnAmount, 0 AS shopwindowReturnAmount
                         FROM (
                                  SELECT company_id, IFNULL(SUM(total_price),0) AS videoSaleAmount, 0 AS liveSaleAmount,0 AS shopwindowSaleAmount
                                  FROM replay_trade WHERE sell_platform_type = 0 and pay_state = 2 AND pay_time >=#{beginDate} AND pay_time <#{endDate} GROUP BY company_id
                                  UNION ALL
                                  SELECT company_id,0 AS videoSaleAmount, IFNULL(SUM(total_price),0) AS liveSaleAmount,0 AS shopwindowSaleAmount
                                  FROM replay_trade WHERE sell_platform_type = 0 and scene_group in (1176,1177) and pay_state = 2 AND pay_time >=#{beginDate} AND pay_time <#{endDate} GROUP BY company_id
                                  UNION ALL
                                  SELECT company_id,0 AS videoSaleAmount, 0 AS liveSaleAmount, IFNULL(SUM(total_price) ,0)AS shopwindowSaleAmount
                                  FROM replay_trade WHERE sell_platform_type = 0 and scene_group = 1195 and pay_state = 2 AND pay_time >=#{beginDate} AND pay_time <#{endDate} GROUP BY company_id
                              ) t GROUP BY company_id
                         UNION ALL
                         SELECT company_id, 0 AS videoSaleAmount,0 AS liveSaleAmount,0 AS shopwindowSaleAmount, SUM(videoReturnAmount) AS videoReturnAmount,SUM(liveReturnAmount) AS liveReturnAmount, SUM(shopwindowReturnAmount) AS shopwindowReturnAmount
                         FROM (
                                  SELECT company_id,IFNULL(SUM(actual_return_price),0) AS videoReturnAmount, 0 AS liveReturnAmount,0 AS shopwindowReturnAmount
                                  FROM replay_return_order WHERE sell_platform_type = 0 AND create_time >=#{beginDate} AND create_time <#{endDate} GROUP BY company_id
                                  UNION ALL
                                  SELECT company_id,0 AS videoReturnAmount, IFNULL(SUM(actual_return_price),0) AS liveReturnAmount,0 AS shopwindowReturnAmount
                                  FROM replay_return_order WHERE sell_platform_type = 0 and scene_group in (1176,1177) AND create_time >=#{beginDate} AND create_time <#{endDate} GROUP BY company_id
                                  UNION ALL
                                  SELECT company_id,0 AS videoReturnAmount, 0 AS liveReturnAmount, IFNULL(SUM(actual_return_price) ,0)AS shopwindowReturnAmount
                                  FROM replay_return_order WHERE sell_platform_type = 0 and scene_group = 1195 AND create_time >=#{beginDate} AND create_time <#{endDate} GROUP BY company_id
                              ) r GROUP BY company_id
                     ) s GROUP BY company_id
            ) a ON c.company_info_id = a.company_info_id WHERE c.del_flag = 0
        ]]>
        <if test="companyId != null">
            AND c.company_info_id = #{companyId}
        </if>
            ) total
    </select>


    <select id="wechatVideotatistics" parameterType="com.wanmi.ares.report.trade.model.request.TradeCollect"
            resultType="com.wanmi.ares.report.wechatvideo.model.entity.WechatVideoBase">
<![CDATA[
                SELECT ANY_VALUE(company_id) AS companyInfoId,ANY_VALUE(video_account) AS videoAccount,ANY_VALUE(IFNULL(wvu.finder_nickname, s.video_name)) AS videoName,SUM(videoSaleAmount) AS videoSaleAmount,SUM(liveSaleAmount) AS liveSaleAmount, SUM(shopwindowSaleAmount) AS shopwindowSaleAmount,SUM(videoReturnAmount) AS videoReturnAmount,SUM(liveReturnAmount) AS liveReturnAmount, SUM(shopwindowReturnAmount) AS shopwindowReturnAmount
                FROM (
                         SELECT company_id,video_account,ANY_VALUE(video_name) AS video_name,SUM(videoSaleAmount) AS videoSaleAmount,SUM(liveSaleAmount) AS liveSaleAmount, SUM(shopwindowSaleAmount) AS shopwindowSaleAmount,0 AS videoReturnAmount,0 AS liveReturnAmount, 0 AS shopwindowReturnAmount
                         FROM (
                                  SELECT company_id,video_account,ANY_VALUE(video_name) AS video_name, IFNULL(SUM(total_price),0) AS videoSaleAmount, 0 AS liveSaleAmount,0 AS shopwindowSaleAmount
                                  FROM replay_trade WHERE sell_platform_type = 0 and pay_state = 2 AND pay_time >=#{beginDate} AND pay_time <#{endDate} GROUP BY company_id,video_account
                                  UNION ALL
                                  SELECT company_id,video_account,ANY_VALUE(video_name) AS video_name,0 AS videoSaleAmount, IFNULL(SUM(total_price),0) AS liveSaleAmount,0 AS shopwindowSaleAmount
                                  FROM replay_trade WHERE sell_platform_type = 0 and scene_group in (1176,1177) and pay_state = 2 AND pay_time >=#{beginDate} AND pay_time <#{endDate} GROUP BY company_id,video_account
                                  UNION ALL
                                  SELECT company_id,video_account,ANY_VALUE(video_name) AS video_name,0 AS videoSaleAmount, 0 AS liveSaleAmount, IFNULL(SUM(total_price) ,0)AS shopwindowSaleAmount
                                  FROM replay_trade WHERE sell_platform_type = 0 and scene_group = 1195 and pay_state = 2 AND pay_time >=#{beginDate} AND pay_time <#{endDate} GROUP BY company_id,video_account
                              ) t GROUP BY company_id,video_account
                         UNION ALL
                         SELECT company_id,video_account,ANY_VALUE(video_name) AS video_name, 0 AS videoSaleAmount,0 AS liveSaleAmount,0 AS shopwindowSaleAmount, SUM(videoReturnAmount) AS videoReturnAmount,SUM(liveReturnAmount) AS liveReturnAmount, SUM(shopwindowReturnAmount) AS shopwindowReturnAmount
                         FROM (
                                  SELECT company_id,video_account,ANY_VALUE(video_name) AS video_name,IFNULL(SUM(actual_return_price),0) AS videoReturnAmount, 0 AS liveReturnAmount,0 AS shopwindowReturnAmount
                                  FROM replay_return_order WHERE sell_platform_type = 0 AND create_time >=#{beginDate} AND create_time <#{endDate} GROUP BY company_id,video_account
                                  UNION ALL
                                  SELECT company_id,video_account,ANY_VALUE(video_name) AS video_name,0 AS videoReturnAmount, IFNULL(SUM(actual_return_price),0) AS liveReturnAmount,0 AS shopwindowReturnAmount
                                  FROM replay_return_order WHERE sell_platform_type = 0 and scene_group in (1176,1177) AND create_time >=#{beginDate} AND create_time <#{endDate} GROUP BY company_id,video_account
                                  UNION ALL
                                  SELECT company_id,video_account,ANY_VALUE(video_name) AS video_name,0 AS videoReturnAmount, 0 AS liveReturnAmount, IFNULL(SUM(actual_return_price) ,0)AS shopwindowReturnAmount
                                  FROM replay_return_order WHERE sell_platform_type = 0 and scene_group = 1195 AND create_time >=#{beginDate} AND create_time <#{endDate} GROUP BY company_id,video_account
                              ) r GROUP BY company_id,video_account
                     ) s
                LEFT JOIN replay_wechat_video_user wvu ON video_account = wvu.promoter_id
                WHERE 1 = 1
        ]]>
        <if test="companyId != null">
            AND company_id = #{companyId}
        </if>
        GROUP BY company_id,video_account
        HAVING video_account IS NOT NULL AND video_account != ''
        <if test="beginIndex != null and pageSize != null">
            LIMIT #{beginIndex}, #{pageSize}
        </if>
    </select>
    <select id="wechatVideotatisticsForBoss" parameterType="com.wanmi.ares.report.trade.model.request.TradeCollect"
            resultType="com.wanmi.ares.report.wechatvideo.model.entity.WechatVideoBase">
<![CDATA[
                SELECT 0 AS companyInfoId,ANY_VALUE(video_account) AS videoAccount,ANY_VALUE(IFNULL(wvu.finder_nickname, s.video_name)) AS videoName,SUM(videoSaleAmount) AS videoSaleAmount,SUM(liveSaleAmount) AS liveSaleAmount, SUM(shopwindowSaleAmount) AS shopwindowSaleAmount,SUM(videoReturnAmount) AS videoReturnAmount,SUM(liveReturnAmount) AS liveReturnAmount, SUM(shopwindowReturnAmount) AS shopwindowReturnAmount
                FROM (
                         SELECT video_account,ANY_VALUE(video_name) AS video_name,SUM(videoSaleAmount) AS videoSaleAmount,SUM(liveSaleAmount) AS liveSaleAmount, SUM(shopwindowSaleAmount) AS shopwindowSaleAmount,0 AS videoReturnAmount,0 AS liveReturnAmount, 0 AS shopwindowReturnAmount
                         FROM (
                                  SELECT video_account,ANY_VALUE(video_name) AS video_name, IFNULL(SUM(total_price),0) AS videoSaleAmount, 0 AS liveSaleAmount,0 AS shopwindowSaleAmount
                                  FROM replay_trade WHERE sell_platform_type = 0 and pay_state = 2 AND pay_time >=#{beginDate} AND pay_time <#{endDate} GROUP BY video_account
                                  UNION ALL
                                  SELECT video_account,ANY_VALUE(video_name) AS video_name,0 AS videoSaleAmount, IFNULL(SUM(total_price),0) AS liveSaleAmount,0 AS shopwindowSaleAmount
                                  FROM replay_trade WHERE sell_platform_type = 0 and scene_group in (1176,1177) and pay_state = 2 AND pay_time >=#{beginDate} AND pay_time <#{endDate} GROUP BY video_account
                                  UNION ALL
                                  SELECT video_account,ANY_VALUE(video_name) AS video_name,0 AS videoSaleAmount, 0 AS liveSaleAmount, IFNULL(SUM(total_price) ,0)AS shopwindowSaleAmount
                                  FROM replay_trade WHERE sell_platform_type = 0 and scene_group = 1195 and pay_state = 2 AND pay_time >=#{beginDate} AND pay_time <#{endDate} GROUP BY video_account
                              ) t GROUP BY video_account
                         UNION ALL
                         SELECT video_account,ANY_VALUE(video_name) AS video_name, 0 AS videoSaleAmount,0 AS liveSaleAmount,0 AS shopwindowSaleAmount, SUM(videoReturnAmount) AS videoReturnAmount,SUM(liveReturnAmount) AS liveReturnAmount, SUM(shopwindowReturnAmount) AS shopwindowReturnAmount
                         FROM (
                                  SELECT video_account,ANY_VALUE(video_name) AS video_name,IFNULL(SUM(actual_return_price),0) AS videoReturnAmount, 0 AS liveReturnAmount,0 AS shopwindowReturnAmount
                                  FROM replay_return_order WHERE sell_platform_type = 0 AND create_time >=#{beginDate} AND create_time <#{endDate} GROUP BY video_account
                                  UNION ALL
                                  SELECT video_account,ANY_VALUE(video_name) AS video_name,0 AS videoReturnAmount, IFNULL(SUM(actual_return_price),0) AS liveReturnAmount,0 AS shopwindowReturnAmount
                                  FROM replay_return_order WHERE sell_platform_type = 0 and scene_group in (1176,1177) AND create_time >=#{beginDate} AND create_time <#{endDate} GROUP BY video_account
                                  UNION ALL
                                  SELECT video_account,ANY_VALUE(video_name) AS video_name,0 AS videoReturnAmount, 0 AS liveReturnAmount, IFNULL(SUM(actual_return_price) ,0)AS shopwindowReturnAmount
                                  FROM replay_return_order WHERE sell_platform_type = 0 and scene_group = 1195 AND create_time >=#{beginDate} AND create_time <#{endDate} GROUP BY video_account
                              ) r GROUP BY video_account
                     ) s
                LEFT JOIN replay_wechat_video_user wvu ON video_account = wvu.promoter_id
                WHERE 1 = 1
        ]]>
        GROUP BY video_account
        HAVING video_account IS NOT NULL AND video_account != ''
    </select>

    <select id="countWechatVideotatistics" resultType="java.lang.Integer">
<![CDATA[
            SELECT COUNT(*) FROM (
                SELECT ANY_VALUE(company_id) AS companyInfoId,ANY_VALUE(video_account) AS videoAccount,ANY_VALUE(IFNULL(wvu.finder_nickname, s.video_name)) AS videoName,SUM(videoSaleAmount) AS videoSaleAmount,SUM(liveSaleAmount) AS liveSaleAmount, SUM(shopwindowSaleAmount) AS shopwindowSaleAmount,SUM(videoReturnAmount) AS videoReturnAmount,SUM(liveReturnAmount) AS liveReturnAmount, SUM(shopwindowReturnAmount) AS shopwindowReturnAmount
                FROM (
                         SELECT company_id,video_account,ANY_VALUE(video_name) AS video_name,SUM(videoSaleAmount) AS videoSaleAmount,SUM(liveSaleAmount) AS liveSaleAmount, SUM(shopwindowSaleAmount) AS shopwindowSaleAmount,0 AS videoReturnAmount,0 AS liveReturnAmount, 0 AS shopwindowReturnAmount
                         FROM (
                                  SELECT company_id,video_account,ANY_VALUE(video_name) AS video_name, IFNULL(SUM(total_price),0) AS videoSaleAmount, 0 AS liveSaleAmount,0 AS shopwindowSaleAmount
                                  FROM replay_trade WHERE sell_platform_type = 0 and pay_state = 2 AND pay_time >=#{beginDate} AND pay_time <#{endDate} GROUP BY company_id,video_account
                                  UNION ALL
                                  SELECT company_id,video_account,ANY_VALUE(video_name) AS video_name,0 AS videoSaleAmount, IFNULL(SUM(total_price),0) AS liveSaleAmount,0 AS shopwindowSaleAmount
                                  FROM replay_trade WHERE sell_platform_type = 0 and scene_group in (1176,1177) and pay_state = 2 AND pay_time >=#{beginDate} AND pay_time <#{endDate} GROUP BY company_id,video_account
                                  UNION ALL
                                  SELECT company_id,video_account,ANY_VALUE(video_name) AS video_name,0 AS videoSaleAmount, 0 AS liveSaleAmount, IFNULL(SUM(total_price) ,0)AS shopwindowSaleAmount
                                  FROM replay_trade WHERE sell_platform_type = 0 and scene_group = 1195 and pay_state = 2 AND pay_time >=#{beginDate} AND pay_time <#{endDate} GROUP BY company_id,video_account
                              ) t GROUP BY company_id,video_account
                         UNION ALL
                         SELECT company_id,video_account,ANY_VALUE(video_name) AS video_name, 0 AS videoSaleAmount,0 AS liveSaleAmount,0 AS shopwindowSaleAmount, SUM(videoReturnAmount) AS videoReturnAmount,SUM(liveReturnAmount) AS liveReturnAmount, SUM(shopwindowReturnAmount) AS shopwindowReturnAmount
                         FROM (
                                  SELECT company_id,video_account,ANY_VALUE(video_name) AS video_name,IFNULL(SUM(actual_return_price),0) AS videoReturnAmount, 0 AS liveReturnAmount,0 AS shopwindowReturnAmount
                                  FROM replay_return_order WHERE sell_platform_type = 0 AND create_time >=#{beginDate} AND create_time <#{endDate} GROUP BY company_id,video_account
                                  UNION ALL
                                  SELECT company_id,video_account,ANY_VALUE(video_name) AS video_name,0 AS videoReturnAmount, IFNULL(SUM(actual_return_price),0) AS liveReturnAmount,0 AS shopwindowReturnAmount
                                  FROM replay_return_order WHERE sell_platform_type = 0 and scene_group in (1176,1177) AND create_time >=#{beginDate} AND create_time <#{endDate} GROUP BY company_id,video_account
                                  UNION ALL
                                  SELECT company_id,video_account,ANY_VALUE(video_name) AS video_name,0 AS videoReturnAmount, 0 AS liveReturnAmount, IFNULL(SUM(actual_return_price) ,0)AS shopwindowReturnAmount
                                  FROM replay_return_order WHERE sell_platform_type = 0 and scene_group = 1195 AND create_time >=#{beginDate} AND create_time <#{endDate} GROUP BY company_id,video_account
                              ) r GROUP BY company_id,video_account
                     ) s
                    LEFT JOIN replay_wechat_video_user wvu ON video_account = wvu.promoter_id
            ]]>
                WHERE 1 = 1
                <if test="companyId != null">
                AND company_id = #{companyId}
                </if>
                GROUP BY company_id,video_account
                HAVING video_account IS NOT NULL AND video_account != ''
                ) total
    </select>



    <select id="collectAllTrade" parameterType="com.wanmi.ares.report.trade.model.request.TradeCollect"
            resultType="com.wanmi.ares.report.trade.model.root.TradeBase">
        <![CDATA[
        SELECT
            SUM(temp.uv) uv,
            SUM(temp.order_num) orderNum,
            SUM(temp.order_user_num) orderUserNum,
            SUM(temp.order_money) orderMoney,
            SUM(temp.pay_num) payNum,
            SUM(temp.pay_user_num) payUserNum,
            SUM(temp.pay_money) payMoney,
            CONVERT(SUM(temp.pay_user_num)/SUM(temp.order_user_num)*100,DECIMAL(10,2)) payConversion,
            CONVERT(SUM(temp.pay_money)/SUM(temp.pay_user_num),DECIMAL(20,2)) userPerPrice,
            CONVERT(SUM(temp.pay_money)/SUM(temp.pay_num),DECIMAL(20,2)) orderPerPrice,
            SUM(temp.refund_num) refundNum,
            SUM(temp.refund_user_num) refundUserNum,
            SUM(temp.refund_money) refundMoney,
            0 AS companyId
        FROM (
            SELECT
                0 AS uv,
                SUM(t.order_num) order_num,
                SUM(t.order_user_num) order_user_num,
                SUM(t.order_money) order_money,
                SUM(t.pay_num) pay_num,
                SUM(t.pay_user_num) pay_user_num,
                SUM(t.pay_money) pay_money,
                0 AS refund_num,
                0 AS refund_user_num,
                0 AS refund_money
            FROM (
                SELECT
                    COUNT(1) order_num ,
                    COUNT(DISTINCT(customer_id)) order_user_num,
                    SUM(total_price) order_money,
                    0 AS pay_num,
                    0 AS pay_user_num,
                    0 AS pay_money,
                    min(company_id) company_id
                 FROM `replay_trade` rt
                 WHERE DATE_FORMAT(create_time,'%Y-%m-%d') >= #{beginDate} AND  DATE_FORMAT(create_time,'%Y-%m-%d') <= #{endDate} AND company_id IS NOT NULL

                UNION ALL

                SELECT
                    0 AS order_num ,
                    0 AS order_user_num,
                    0 AS order_money,
                    COUNT(1) pay_num,
                    COUNT(DISTINCT customer_id) pay_user_num,
                    SUM(total_price) pay_money,
                    min(company_id) company_id
                 FROM `replay_trade`
                 WHERE DATE_FORMAT(pay_time,'%Y-%m-%d') >= #{beginDate} AND  DATE_FORMAT(pay_time,'%Y-%m-%d') <= #{endDate} AND pay_state = 2 AND company_id IS NOT NULL
                )t

            UNION ALL

             SELECT
                 0 AS uv,
                 0 AS order_num,
                 0 AS order_user_num,
                 0 AS order_money,
                 0 AS pay_num,
                 0 AS pay_user_num,
                 0 AS pay_money,
                 COUNT(1) refund_num,
                 COUNT(DISTINCT customer_id) refund_user_num ,
                 SUM(actual_return_price) refund_money
              FROM `replay_return_order`
              WHERE return_flow_state = 5 AND DATE_FORMAT(finish_time,'%Y-%m-%d') >= #{beginDate} AND  DATE_FORMAT(finish_time,'%Y-%m-%d') <= #{endDate} AND company_id IS NOT NULL

            UNION ALL

                SELECT
                  COUNT(DISTINCT(fdu.user_id)) AS uv,
                   0 AS order_num,
                 0 AS order_user_num,
                 0 AS order_money,
                 0 AS pay_num,
                 0 AS pay_user_num,
                 0 AS pay_money,
                 0 AS refund_num,
                 0 AS refund_user_num,
                 0 AS refund_money
                FROM
                  flow_day fd
                  LEFT JOIN replay_flow_day_user_info fdu ON fdu.flow_day_id = fd.ID
                  WHERE DATE_FORMAT(fd.DATE,'%Y-%m-%d') >= #{beginDate} AND  DATE_FORMAT(fd.DATE,'%Y-%m-%d') <= #{endDate} AND fd.SHOP_ID = 0

             )temp
         ]]>
    </select>

    <select id="collectTradeStore" parameterType="com.wanmi.ares.report.trade.model.request.TradeCollect"
            resultType="com.wanmi.ares.report.trade.model.root.TradeBase">
        <![CDATA[
        SELECT
            SUM(temp.uv) uv,
            SUM(temp.order_num) orderNum,
            SUM(temp.order_user_num) orderUserNum,
            SUM(temp.order_money) orderMoney,
            SUM(temp.pay_num) payNum,
            SUM(temp.pay_user_num) payUserNum,
            SUM(temp.pay_money) payMoney,
            CONVERT(SUM(temp.pay_user_num)/SUM(temp.order_user_num)*100,DECIMAL(10,2)) payConversion,
            CONVERT(SUM(temp.order_money)/SUM(temp.order_user_num),DECIMAL(20,2)) userPerPrice,
            CONVERT(SUM(temp.order_money)/SUM(temp.order_num),DECIMAL(20,2)) orderPerPrice,
            SUM(temp.refund_num) refundNum,
            SUM(temp.refund_user_num) refundUserNum,
            SUM(temp.refund_money) refundMoney,
            temp.company_id companyId
        FROM (
            SELECT
                0 AS uv,
                SUM(t.order_num) order_num,
                SUM(t.order_user_num) order_user_num,
                SUM(t.order_money) order_money,
                SUM(t.pay_num) pay_num,
                SUM(t.pay_user_num) pay_user_num,
                SUM(t.pay_money) pay_money,
                0 AS refund_num,
                0 AS refund_user_num,
                0 AS refund_money,
                t.company_id  company_id
            FROM (
                SELECT
                    COUNT(1) order_num ,
                    COUNT(DISTINCT(customer_id)) order_user_num,
                    SUM(total_price) order_money,
                    0 AS pay_num,
                    0 AS pay_user_num,
                    0 AS pay_money,
                    company_id
                 FROM `replay_trade` rt
                 WHERE DATE_FORMAT(create_time,'%Y-%m-%d') >= #{beginDate} AND  DATE_FORMAT(create_time,'%Y-%m-%d') <= #{endDate} AND company_id IS NOT NULL
                 GROUP BY company_id

                UNION ALL

                SELECT
                    0 AS order_num ,
                    0 AS order_user_num,
                    0 AS order_money,
                    COUNT(1) pay_num,
                    COUNT(DISTINCT customer_id) pay_user_num,
                    SUM(total_price) pay_money,
                    company_id
                 FROM `replay_trade`
                 WHERE DATE_FORMAT(pay_time,'%Y-%m-%d') >= #{beginDate} AND  DATE_FORMAT(pay_time,'%Y-%m-%d') <= #{endDate} AND pay_state = 2 AND company_id IS NOT NULL
                 GROUP BY company_id )t
             GROUP BY t.company_id

            UNION ALL

             SELECT
                 0 AS uv,
                 0 AS order_num,
                 0 AS order_user_num,
                 0 AS order_money,
                 0 AS pay_num,
                 0 AS pay_user_num,
                 0 AS pay_money,
                 COUNT(1) refund_num,
                 COUNT(DISTINCT customer_id) refund_user_num ,
                 SUM(actual_return_price) refund_money,
                 company_id
              FROM `replay_return_order`
              WHERE return_flow_state = 5 AND DATE_FORMAT(finish_time,'%Y-%m-%d') >= #{beginDate} AND  DATE_FORMAT(finish_time,'%Y-%m-%d') <= #{endDate} AND company_id IS NOT NULL
              GROUP BY company_id

            UNION ALL

                SELECT
                  COUNT(DISTINCT(fdu.user_id)) AS uv,
                   0 AS order_num,
                 0 AS order_user_num,
                 0 AS order_money,
                 0 AS pay_num,
                 0 AS pay_user_num,
                 0 AS pay_money,
                 0 AS refund_num,
                 0 AS refund_user_num,
                 0 AS refund_money,
                 fd.SHOP_ID AS company_id
                FROM
                  flow_day fd
                  LEFT JOIN replay_flow_day_user_info fdu ON fdu.flow_day_id = fd.ID
                  WHERE DATE_FORMAT(fd.DATE,'%Y-%m-%d') >= #{beginDate} AND  DATE_FORMAT(fd.DATE,'%Y-%m-%d') <= #{endDate} AND fd.SHOP_ID != 0
                  GROUP BY fd.SHOP_ID
             )temp GROUP BY temp.company_id
         ]]>
    </select>

</mapper>