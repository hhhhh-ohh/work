apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: dbreplay
    name: dbreplay-deployment
  name: dbreplay
  namespace: sbc
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dbreplay
  template:
    metadata:
      labels:
        app: dbreplay
    spec:
      imagePullSecrets:
        - name: docker-secret
      containers:
        - image: {{IMAGE_NAME}}
          imagePullPolicy: Always
          name: dbreplay
          ports:
            - containerPort: 8888
              name: tomcat-port
          livenessProbe:
            httpGet:
              path: /act/health
              port: 8881
            initialDelaySeconds: 60
            periodSeconds: 30
          env:
            - name: JAVA_OPTS
              value: {{JAVA_ENV_PARAMS}}
            - name: RESTART_
              value: {{DATE}}
          volumeMounts:
            - mountPath: /data/server/log
              name: dbreplay-logs
            - mountPath: /data/server/conf/application.properties
              name: env-config
              subPath: application.properties
      volumes:
        - name: dbreplay-logs
          hostPath:
            path: /data/sbc/logs/dbreplay
        - name: env-config
          configMap:
            name: dbreplay-config
      hostNetwork: false
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dbreplay-config
  namespace: sbc
data:
  application.properties: |
    server.port=8888
    management.server.port=8881
    management.endpoint.env.enabled=true
    management.endpoint.health.enabled=true
    management.endpoint.health.show-details=always
    management.endpoint.info.enabled=true
    management.endpoint.mappings.enabled=true
    management.endpoints.enabled-by-default=true
    management.endpoints.web.base-path=/act
    management.endpoints.web.exposure.include=env,health,info,mappings
    # ----------------------------------------
    # application info
    # ----------------------------------------
    info.app.name=DbReplay
    info.app.description=sbc - DB replay platform
    info.build.artifact=@project.artifactId@
    info.build.version=@project.version@
    info.app.encoding=@project.build.sourceEncoding@


    # ----------------------------------------
    # log config
    # ----------------------------------------
    logging.level.root=INFO
    logging.level.com.wanmi=DEBUG
    logging.level.org.springframework.jdbc.core=DEBUG
    logging.level.org.springframework=WARN
    logging.config=classpath:logback.xml

    #-----------------------------------------
    # db config
    # ----------------------------------------
    spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
    spring.datasource.url=jdbc:mysql://mysql-svc:3306/s2b_statistics?characterEncoding=UTF-8&&zeroDateTimeBehavior=convertToNull&autoReconnect=true&failOverReadOnly=false&connectTimeout=30000&allowMultiQueries=true&serverTimezone=Asia/Shanghai&generateSimpleParameterMetadata=true
    spring.datasource.username=root
    spring.datasource.password=Wmi@2022
    spring.datasource.dbcp2.min-idle=5
    spring.datasource.dbcp2.max-wait-millis=3000
    spring.datasource.dbcp2.initial-size=5
    spring.datasource.dbcp2.log-abandoned=true
    spring.datasource.dbcp2.remove-abandoned-on-maintenance=true
    spring.datasource.dbcp2.remove-abandoned-timeout=600
    spring.datasource.dbcp2.time-between-eviction-runs-millis=5000
    spring.datasource.dbcp2.min-evictable-idle-time-millis=30000
    spring.datasource.dbcp2.validation-query=SELECT 1
    spring.datasource.dbcp2.test-while-idle=true
    spring.datasource.dbcp2.test-on-borrow=true

    ####mongo
    spring.data.mongodb.uri=mongodb://s2b:S2b^2022@mongodb:27017/s2b?replicaSet=rs1
    #spring.data.mongodb.port = 27017
    #spring.data.mongodb.database = s2b
    spring.data.mongodb.repositories.enabled=true


    #-----------------------------------------
    # kafka config
    # ----------------------------------------
    spring.kafka.bootstrap-servers=kafka-svc:9092
    spring.kafka.producer.retries=0
    spring.kafka.producer.batch-size=16384
    spring.kafka.producer.buffer-memory=33554432
    spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
    spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
    spring.kafka.producer.properties.linger.ms=1

    #    kafka consumer
    spring.kafka.consumer.enable-auto-commit=false
    spring.kafka.consumer.auto-commit-interval=100ms
    spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
    spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
    spring.kafka.consumer.properties.session.timeout.ms=180000
    spring.kafka.consumer.group-id=zgl-group

    canal.config.replay-table=coupon_code*:coupon_code

    topics.canal=sbc-customer.company_info,sbc-goods.goods,sbc-goods.goods_info,sbc-goods.goods_cate,\
      sbc-goods.goods_brand,sbc-goods.store_cate,sbc-goods.store_cate_goods_rela,sbc-goods.goods_info_spec_detail_rel,\
      sbc-customer.customer,sbc-customer.customer_detail,sbc-customer.customer_level,sbc-customer.employee,\
      sbc-customer.store,sbc-customer.store_customer_rela,sbc-customer.store_level,sbc-account.customer_funds,\
      sbc-order.goods_customer_follow_action,sbc-order.purchase_action,sbc-marketing.coupon_activity,\
      sbc-marketing.coupon_activity_config,sbc-marketing.coupon_code_0,sbc-marketing.coupon_code_1,\
      sbc-marketing.coupon_code_2,sbc-marketing.coupon_code_3,sbc-marketing.coupon_code_4,\
      sbc-marketing.coupon_info,sbc-marketing.booking_sale,sbc-marketing.booking_sale_goods,\
      sbc-goods.flash_sale_goods,sbc-marketing.appointment_sale,sbc-marketing.appointment_sale_goods,\
      sbc-goods.groupon_goods_info,sbc-goods.groupon_share_record,sbc-marketing.marketing,\
      sbc-marketing.marketing_scope,sbc-marketing.groupon_activity,sbc-customer.customer_delivery_address,\
      sbc-customer.customer_points_detail,sbc-customer.third_login_relation,sbc-setting.system_config,\
      sbc-setting.platform_address,sbc-account.customer_funds,sbc-account.customer_funds_detail,\
      sbc-marketing.coupon_marketing_scope,sbc-marketing.groupon_activity,sbc-marketing.coupon_marketing_customer_scope,\
      sbc-goods.goods_spec,sbc-order.refund_order,sbc-customer.wechat_video_user,sbc-customer.paying_member_customer_rel,\
      sbc-order.paying_member_record,sbc-marketing.bargain_goods,sbc-marketing.marketing_buyout_price_level,\
      sbc-marketing.marketing_half_price_second_piece,sbc-marketing.marketing_suits,sbc-marketing.marketing_suits_sku

    topics.canal.concurrency=2

    ## ??canal???1.1.6?????????
    topics.canal.replay=_

    topics.capture=s2b.trade,s2b.returnOrder,s2b.appointmentRecord
    #topics.capture=example
    topics.capture.concurrency=2

    # 需要注意如果是k8s内部运行则是使用代码内部的mapping配置的json，所以要保持代码内部的mapping json是最新的
    mongo.capture.mapping.enable = true