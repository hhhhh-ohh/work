package com.wanmi.sbc.order.provider.impl.trade;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.wanmi.sbc.account.bean.enums.PayType;
import com.wanmi.sbc.common.base.BaseResponse;
import com.wanmi.sbc.common.base.MicroServicePage;
import com.wanmi.sbc.common.base.Operator;
import com.wanmi.sbc.common.enums.*;
import com.wanmi.sbc.common.exception.SbcRuntimeException;
import com.wanmi.sbc.common.util.Constants;
import com.wanmi.sbc.common.util.GeneratorService;
import com.wanmi.sbc.common.util.KsBeanUtil;
import com.wanmi.sbc.common.util.WmCollectionUtils;
import com.wanmi.sbc.customer.api.provider.communityleader.CommunityLeaderQueryProvider;
import com.wanmi.sbc.customer.api.request.communityleader.CommunityLeaderListRequest;
import com.wanmi.sbc.customer.api.response.store.StoreInfoResponse;
import com.wanmi.sbc.customer.bean.vo.CommunityLeaderVO;
import com.wanmi.sbc.customer.bean.vo.CompanyInfoVO;
import com.wanmi.sbc.empower.api.provider.logisticslog.LogisticsLogProvider;
import com.wanmi.sbc.empower.api.provider.logisticslog.LogisticsLogQueryProvider;
import com.wanmi.sbc.empower.api.provider.wechatwaybill.WechatWaybillProvider;
import com.wanmi.sbc.empower.api.request.logisticslog.LogisticsLogByIdRequest;
import com.wanmi.sbc.empower.api.request.logisticslog.LogisticsLogModifyEndFlagRequest;
import com.wanmi.sbc.empower.api.request.wechatwaybill.WechatWaybillStatusRequest;
import com.wanmi.sbc.empower.api.request.wechatwaybill.WechatWaybillTokenRequest;
import com.wanmi.sbc.empower.api.response.logisticslog.LogisticsLogByIdResponse;
import com.wanmi.sbc.empower.bean.vo.LogisticsLogVO;
import com.wanmi.sbc.goods.api.response.info.GoodsInfoViewListResponse;
import com.wanmi.sbc.marketing.bean.enums.BookingType;
import com.wanmi.sbc.order.api.provider.trade.TradeQueryProvider;
import com.wanmi.sbc.order.api.request.trade.*;
import com.wanmi.sbc.order.api.response.trade.*;
import com.wanmi.sbc.order.bean.dto.TradeBatchDeliverDTO;
import com.wanmi.sbc.order.bean.dto.TradeQueryDTO;
import com.wanmi.sbc.order.bean.dto.TradeStateDTO;
import com.wanmi.sbc.order.bean.enums.AuditState;
import com.wanmi.sbc.order.bean.enums.DeliverStatus;
import com.wanmi.sbc.order.bean.enums.FlowState;
import com.wanmi.sbc.order.bean.enums.PayState;
import com.wanmi.sbc.order.bean.enums.*;
import com.wanmi.sbc.order.bean.vo.*;
import com.wanmi.sbc.order.groupon.service.GrouponOrderService;
import com.wanmi.sbc.order.payorder.model.root.PayOrder;
import com.wanmi.sbc.order.paytraderecord.service.PayTradeRecordService;
import com.wanmi.sbc.order.pointstrade.request.PointsTradeQueryRequest;
import com.wanmi.sbc.order.pointstrade.service.PointsTradeService;
import com.wanmi.sbc.order.returnorder.model.root.ReturnOrder;
import com.wanmi.sbc.order.returnorder.request.ReturnQueryRequest;
import com.wanmi.sbc.order.returnorder.service.ReturnOrderService;
import com.wanmi.sbc.order.thirdplatformtrade.service.LinkedMallTradeService;
import com.wanmi.sbc.order.trade.fsm.TradeFSMService;
import com.wanmi.sbc.order.trade.fsm.event.TradeEvent;
import com.wanmi.sbc.order.trade.fsm.params.StateRequest;
import com.wanmi.sbc.order.trade.model.entity.CreditPayInfo;
import com.wanmi.sbc.order.trade.model.entity.TradeDeliver;
import com.wanmi.sbc.order.trade.model.entity.TradeItem;
import com.wanmi.sbc.order.trade.model.entity.TradeState;
import com.wanmi.sbc.order.trade.model.entity.value.Buyer;
import com.wanmi.sbc.order.trade.model.mapper.TradeMapper;
import com.wanmi.sbc.order.trade.model.root.ProviderTrade;
import com.wanmi.sbc.order.trade.model.root.Trade;
import com.wanmi.sbc.order.trade.model.root.TradeConfirmItem;
import com.wanmi.sbc.order.trade.model.root.TradeItemGroup;
import com.wanmi.sbc.order.trade.reponse.TradeFreightResponse;
import com.wanmi.sbc.order.trade.reponse.TradeRemedyDetails;
import com.wanmi.sbc.order.trade.request.TradeDeliverRequest;
import com.wanmi.sbc.order.trade.request.*;
import com.wanmi.sbc.order.trade.service.*;
import com.wanmi.sbc.setting.api.provider.systemconfig.SystemConfigQueryProvider;
import com.wanmi.sbc.setting.api.request.systemconfig.SystemConfigQueryRequest;
import com.wanmi.sbc.setting.bean.enums.ConfigKey;
import com.wanmi.sbc.setting.bean.enums.ConfigType;
import com.wanmi.sbc.setting.bean.vo.SystemConfigVO;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import jakarta.validation.Valid;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

/**
 * @Author: ZhangLingKe @Description: @Date: 2018-12-04 10:04
 */
@Slf4j
@Validated
@RestController
public class TradeQueryController implements TradeQueryProvider {

    @Autowired
    private TradeService tradeService;
    @Autowired
    private TradeServiceInterface tradeServiceInterface;

    @Autowired
    private ProviderTradeService providerTradeService;

    @Autowired
    private LinkedMallTradeService thirdPlatformTradeService;

    @Autowired
    private TradeMapper tradeMapper;

    @Autowired
    private TradeOptimizeService tradeOptimizeService;

    @Autowired
    private CreditTradeQueryService creditTradeQueryService;

    @Autowired
    private ReturnOrderService returnOrderService;

    @Autowired
    private PointsTradeService pointsTradeService;

    @Autowired
    private GrouponOrderService grouponOrderService;

    @Autowired
    private SystemConfigQueryProvider systemConfigQueryProvider;

    @Autowired
    private CommunityLeaderQueryProvider communityLeaderQueryProvider;

    @Autowired
    private PayTradeRecordService payTradeRecordService;

    @Autowired
    private WechatWaybillProvider wechatWaybillProvider;

    @Autowired
    private LogisticsLogQueryProvider logisticsLogQueryProvider;

    @Autowired
    protected LogisticsLogProvider logisticsLogProvider;

    @Autowired
    protected TradeFSMService tradeFSMService;



    /**
     * @param tradePageCriteriaRequest 带参分页参数 {@link TradePageCriteriaRequest}
     * @return
     */
    @Override
    public BaseResponse<TradePageCriteriaResponse> pageCriteria(
            @RequestBody @Valid TradePageCriteriaRequest tradePageCriteriaRequest) {

        // 根据providerTradeId模糊查询ProviderTrade,获取tradeId
        if (StringUtils.isNotBlank(tradePageCriteriaRequest.getTradePageDTO().getProviderTradeId())
                || StringUtils.isNotBlank(
                tradePageCriteriaRequest.getTradePageDTO().getProviderName())) {
            List<ProviderTrade> providerTrades =
                    providerTradeService.queryAll(
                            ProviderTradeQueryRequest.builder()
                                    .providerName(
                                            tradePageCriteriaRequest
                                                    .getTradePageDTO()
                                                    .getProviderName())
                                    .id(
                                            tradePageCriteriaRequest
                                                    .getTradePageDTO()
                                                    .getProviderTradeId())
                                    .build());
            if (CollectionUtils.isNotEmpty(providerTrades)) {
                List<String> tradeIds =
                        providerTrades.stream()
                                .map(ProviderTrade::getParentId)
                                .collect(Collectors.toList());
                String[] ids = tradeIds.toArray(new String[tradeIds.size()]);
                tradePageCriteriaRequest.getTradePageDTO().setIds(ids);
            } else {
                return BaseResponse.success(
                        TradePageCriteriaResponse.builder()
                                .tradePage(new MicroServicePage<TradeVO>())
                                .build());
            }
        }

        tradePageCriteriaRequest.getTradePageDTO().setProviderTradeId(null);
        tradePageCriteriaRequest.getTradePageDTO().setProviderName(null);

        TradeQueryRequest tradeQueryRequest =
                KsBeanUtil.convert(
                        tradePageCriteriaRequest.getTradePageDTO(), TradeQueryRequest.class);
        tradeQueryRequest.setCustomerPage(tradePageCriteriaRequest.isCustomerPage());
        if (Objects.nonNull(tradeQueryRequest.getQueryOrderType())) {
            switch (tradeQueryRequest.getQueryOrderType()) {
                case GROUPON:
                    tradeQueryRequest.setGrouponFlag(Boolean.TRUE);
                    break;
                case FLASH_SALE:
                    tradeQueryRequest.setFlashSaleFlag(Boolean.TRUE);
                    break;
                case BOOKING_SALE:
                    tradeQueryRequest.setBookingSaleFlag(Boolean.TRUE);
                    break;
                default:
                    break;
            }
        }

        // 查看渠道待处理就显示待发货和部分发货
        if (Boolean.TRUE.equals(tradeQueryRequest.getThirdPlatformToDo())) {
            tradeQueryRequest.setFlowStates(
                    Arrays.asList(FlowState.AUDIT, FlowState.DELIVERED_PART));
            tradeQueryRequest.setReturnHasFlag(Boolean.FALSE); // 没有退单
        }

        Criteria criteria;
        if (tradePageCriteriaRequest.isReturn()) {
            criteria = tradeQueryRequest.getCanReturnCriteria();
        } else {
            criteria = tradeQueryRequest.getWhereCriteria();
        }
        Page<Trade> page = tradeService.page(criteria, tradeQueryRequest);
        MicroServicePage<TradeVO> tradeVOS = KsBeanUtil.convertPage(page, TradeVO.class);
        List<TradeVO> tradeVOList = tradeVOS.getContent();
        if (CollectionUtils.isNotEmpty(tradeVOS.getContent())) {
            //填充团长名称
            if(Boolean.TRUE.equals(tradePageCriteriaRequest.getTradePageDTO().getFillLeaderNameFlag())) {
               this.fillLeaderName(tradeVOList);
            }

            List<String> providerTradeIds =
                    tradeVOS.getContent().stream().map(TradeVO::getId).collect(Collectors.toList());
            Map<String, List<String>> returnOrderIdMap = returnOrderService.getReturnOrderIdMap(providerTradeIds);
            //查询当前订单有无申请售后
            tradeVOList.forEach(tradeVO -> {
                List<String> returnOrderIdList = returnOrderIdMap.get(tradeVO.getId());
                if(CollectionUtils.isNotEmpty(returnOrderIdList)){
                    tradeVO.setReturnOrderIdList(returnOrderIdList);
                    tradeVO.setIsHasPostSales(Boolean.TRUE);
                }
                tradeVO.setIsReturn(tradeService.verifyAfterProcessing(tradeVO.getId()));

            });
            // 查询所有的子订单(providerTrade表)
            List<ProviderTrade> providerTradeList =
                    providerTradeService.queryAll(
                            ProviderTradeQueryRequest.builder()
                                    .parentIds(providerTradeIds)
                                    .build());
            if (CollectionUtils.isNotEmpty(providerTradeList)) {
                // 查询主订单编号列表
                tradeVOList.forEach(
                        vo -> {
                            List<TradeVO> items = new ArrayList<>();
                            for (ProviderTrade item : providerTradeList) {
                                if (vo.getId().equals(item.getParentId())) {
                                    TradeVO tradeVO = KsBeanUtil.convert(item, TradeVO.class);
                                    items.add(tradeVO);
                                }
                            }
                            //按照：商家子单>供应商子单>LM子单>京东vop子单排序
                            Collections.sort(
                                    items,
                                    (o1, o2) ->
                                            Objects.isNull(o1.getThirdPlatformType())
                                                    ? -1
                                                    : Objects.isNull(o2.getThirdPlatformType())
                                                    ? 1
                                                    : o1.getThirdPlatformType().compareTo(o2.getThirdPlatformType()));
                            vo.setTradeVOList(items);
                        });

                for (TradeVO tradeVO : tradeVOList) {
                    Boolean isContainsTrade = Boolean.FALSE;
                    if (CollectionUtils.isNotEmpty(tradeVO.getTradeVOList())) {
                        List<Long> storeList =
                                tradeVO.getTradeVOList().stream()
                                        .map(TradeVO::getStoreId)
                                        .collect(Collectors.toList());
                        isContainsTrade = storeList.contains(null);
                    }
                    tradeVO.setIsContainsTrade(isContainsTrade);
                }
                tradeVOS.setContent(tradeVOList);
                return BaseResponse.success(
                        TradePageCriteriaResponse.builder().tradePage(tradeVOS).build());
            } else {
                return BaseResponse.success(
                        TradePageCriteriaResponse.builder().tradePage(tradeVOS).build());
            }
        }

        return BaseResponse.success(
                TradePageCriteriaResponse.builder().tradePage(tradeVOS).build());
    }

    /**
     * @param tradePageCriteriaRequest 带参分页参数 {@link TradePageCriteriaRequest}
     * @return
     */
    @Override
    public BaseResponse<TradePageCriteriaResponse> supplierPageCriteria(
            @RequestBody @Valid TradePageCriteriaRequest tradePageCriteriaRequest) {
        // 根据providerTradeId模糊查询ProviderTrade,获取tradeId
        if (StringUtils.isNotBlank(tradePageCriteriaRequest.getTradePageDTO().getProviderTradeId())
                || StringUtils.isNotBlank(
                tradePageCriteriaRequest.getTradePageDTO().getProviderName())) {
            List<ProviderTrade> providerTrades =
                    providerTradeService.queryAll(
                            ProviderTradeQueryRequest.builder()
                                    .providerName(
                                            tradePageCriteriaRequest
                                                    .getTradePageDTO()
                                                    .getProviderName())
                                    .id(
                                            tradePageCriteriaRequest
                                                    .getTradePageDTO()
                                                    .getProviderTradeId())
                                    .build());
            if (CollectionUtils.isNotEmpty(providerTrades)) {
                List<String> tradeIds =
                        providerTrades.stream()
                                .map(ProviderTrade::getParentId)
                                .collect(Collectors.toList());
                String[] ids = tradeIds.toArray(new String[tradeIds.size()]);
                tradePageCriteriaRequest.getTradePageDTO().setIds(ids);
            } else {
                return BaseResponse.success(
                        TradePageCriteriaResponse.builder()
                                .tradePage(new MicroServicePage<TradeVO>())
                                .build());
            }
        }
        tradePageCriteriaRequest.getTradePageDTO().setProviderTradeId(null);
        tradePageCriteriaRequest.getTradePageDTO().setProviderName(null);
        TradeQueryRequest tradeQueryRequest =
                KsBeanUtil.convert(
                        tradePageCriteriaRequest.getTradePageDTO(), TradeQueryRequest.class);
        Criteria criteria;
        TradeQueryDTO dto = tradePageCriteriaRequest.getTradePageDTO();
        if (Objects.nonNull(dto.getQueryOrderType())) {
            switch (dto.getQueryOrderType()) {
                case GROUPON:
                    tradeQueryRequest.setGrouponFlag(Boolean.TRUE);
                    break;
                case FLASH_SALE:
                    tradeQueryRequest.setFlashSaleFlag(Boolean.TRUE);
                    break;
                case BOOKING_SALE:
                    tradeQueryRequest.setBookingSaleFlag(Boolean.TRUE);
                    break;
                case BUY_POINTS_ORDER:
                    tradeQueryRequest.setOrderType(OrderType.NORMAL_ORDER);
                    break;
                case BARGAIN:
                    tradeQueryRequest.setBargainFlag(Boolean.TRUE);
                    break;
                case BUY_CYCLE:
                    tradeQueryRequest.setBuyCycleFlag(Boolean.TRUE);
                    break;
                default:
                    break;
            }
        }

        // 查看渠道待处理就显示待发货和部分发货
        if (Boolean.TRUE.equals(tradeQueryRequest.getThirdPlatformToDo())) {
            tradeQueryRequest.setFlowStates(
                    Arrays.asList(FlowState.AUDIT, FlowState.DELIVERED_PART));
            tradeQueryRequest.setReturnHasFlag(Boolean.FALSE); // 没有退单
        }

        if (tradePageCriteriaRequest.isReturn()) {
            criteria = tradeQueryRequest.getCanReturnCriteria();
        } else {
            criteria = tradeQueryRequest.getWhereCriteria();
        }
        Page<Trade> page = tradeService.page(criteria, tradeQueryRequest);
        MicroServicePage<TradeVO> tradeVOS = KsBeanUtil.convertPage(page, TradeVO.class);
        List<TradeVO> tradeVOList = tradeVOS.getContent();
        if (CollectionUtils.isNotEmpty(tradeVOS.getContent())) {
            //填充团长名称
            if(Boolean.TRUE.equals(tradePageCriteriaRequest.getTradePageDTO().getFillLeaderNameFlag())) {
                this.fillLeaderName(tradeVOList);
            }

            List<String> providerTradeIds =
                    tradeVOS.getContent().stream().map(TradeVO::getId).collect(Collectors.toList());
            //查询订单，是否有售后
            Map<String, List<String>> returnOrderIdMap = returnOrderService.getReturnOrderIdMap(providerTradeIds);
            //查询当前订单有无申请售后
            tradeVOList.forEach(tradeVO -> {
                List<String> ridList = returnOrderIdMap.get(tradeVO.getId());
                //有售后
                if(CollectionUtils.isNotEmpty(ridList)){
                    tradeVO.setIsHasPostSales(Boolean.TRUE);
                    tradeVO.setReturnOrderIdList(ridList);
                }
                tradeVO.setIsReturn(tradeService.verifyAfterProcessing(tradeVO.getId()));
                this.setCanReturnNum(tradeVO);
            });
            // 查询所有的子订单(providerTrade表)
            List<ProviderTrade> providerTradeList =
                    providerTradeService.queryAll(
                            ProviderTradeQueryRequest.builder()
                                    .parentIds(providerTradeIds)
                                    .build());
            if (CollectionUtils.isNotEmpty(providerTradeList)) {
                // 查询主订单编号列表
                tradeVOList.forEach(
                        vo -> {
                            List<TradeVO> items = new ArrayList<>();
                            for (ProviderTrade item : providerTradeList) {
                                if (vo.getId().equals(item.getParentId())) {
                                    TradeVO tradeVO = KsBeanUtil.convert(item, TradeVO.class);
                                    this.setCanReturnNum(tradeVO);
                                    items.add(tradeVO);
                                }
                            }
                            //按照：商家子单>供应商子单>LM子单>京东vop子单排序
                            Collections.sort(
                                    items,
                                    (o1, o2) ->
                                            Objects.isNull(o1.getThirdPlatformType())
                                                    ? -1
                                                    : Objects.isNull(o2.getThirdPlatformType())
                                                    ? 1
                                                    : o1.getThirdPlatformType().compareTo(o2.getThirdPlatformType()));
                            vo.setTradeVOList(items);
                        });
                for (TradeVO tradeVO : tradeVOList) {
                    Boolean isContainsTrade = Boolean.FALSE;
                    if (CollectionUtils.isNotEmpty(tradeVO.getTradeVOList())) {
                        List<Long> storeList =
                                tradeVO.getTradeVOList().stream()
                                        .map(TradeVO::getStoreId)
                                        .collect(Collectors.toList());
                        isContainsTrade = storeList.contains(null);
                    }
                    tradeVO.setIsContainsTrade(isContainsTrade);
                }
                tradeVOS.setContent(tradeVOList);
                return BaseResponse.success(
                        TradePageCriteriaResponse.builder().tradePage(tradeVOS).build());
            } else {
                return BaseResponse.success(
                        TradePageCriteriaResponse.builder().tradePage(tradeVOS).build());
            }
        }
        return BaseResponse.success(
                TradePageCriteriaResponse.builder().tradePage(tradeVOS).build());
    }

    /**
     * @param tradePageCriteriaRequest Boss端带参分页参数 {@link TradePageCriteriaRequest}
     * @return
     */
    @Override
    public BaseResponse<TradePageCriteriaResponse> pageBossCriteria(
            @RequestBody @Valid TradePageCriteriaRequest tradePageCriteriaRequest) {
        // 根据providerTradeId模糊查询ProviderTrade,获取tradeId
        if (StringUtils.isNotBlank(tradePageCriteriaRequest.getTradePageDTO().getProviderTradeId())
                || StringUtils.isNotBlank(
                tradePageCriteriaRequest.getTradePageDTO().getProviderName())
                || StringUtils.isNotEmpty(
                tradePageCriteriaRequest.getTradePageDTO().getProviderCode())) {
            List<ProviderTrade> providerTrades =
                    providerTradeService.queryAll(
                            ProviderTradeQueryRequest.builder()
                                    .providerName(
                                            tradePageCriteriaRequest
                                                    .getTradePageDTO()
                                                    .getProviderName())
                                    .providerCode(
                                            tradePageCriteriaRequest
                                                    .getTradePageDTO()
                                                    .getProviderCode())
                                    .id(
                                            tradePageCriteriaRequest
                                                    .getTradePageDTO()
                                                    .getProviderTradeId())
                                    .build());
            if (CollectionUtils.isNotEmpty(providerTrades)) {
                List<String> tradeIds =
                        providerTrades.stream()
                                .map(ProviderTrade::getParentId)
                                .collect(Collectors.toList());
                String[] ids = tradeIds.toArray(new String[tradeIds.size()]);
                tradePageCriteriaRequest.getTradePageDTO().setIds(ids);
            } else {
                return BaseResponse.success(
                        TradePageCriteriaResponse.builder()
                                .tradePage(new MicroServicePage<TradeVO>())
                                .build());
            }
        }
        tradePageCriteriaRequest.getTradePageDTO().setProviderTradeId(null);
        tradePageCriteriaRequest.getTradePageDTO().setProviderName(null);
        tradePageCriteriaRequest.getTradePageDTO().setProviderCode(null);
        TradeQueryRequest tradeQueryRequest =
                KsBeanUtil.convert(
                        tradePageCriteriaRequest.getTradePageDTO(), TradeQueryRequest.class);
        Criteria criteria;

        TradeQueryDTO dto = tradePageCriteriaRequest.getTradePageDTO();
        if (Objects.nonNull(dto.getQueryOrderType())) {
            switch (dto.getQueryOrderType()) {
                case GROUPON:
                    tradeQueryRequest.setGrouponFlag(Boolean.TRUE);
                    break;
                case FLASH_SALE:
                    tradeQueryRequest.setFlashSaleFlag(Boolean.TRUE);
                    break;
                case BOOKING_SALE:
                    tradeQueryRequest.setBookingSaleFlag(Boolean.TRUE);
                    break;
                case BUY_POINTS_ORDER:
                    tradeQueryRequest.setOrderType(OrderType.NORMAL_ORDER);
                    break;
                case BARGAIN:
                    tradeQueryRequest.setBargainFlag(Boolean.TRUE);
                    break;
                case BUY_CYCLE:
                    tradeQueryRequest.setBuyCycleFlag(Boolean.TRUE);
                    break;
                default:
                    break;
            }
        }

        // 查看渠道待处理就显示待发货和部分发货
        if (Boolean.TRUE.equals(tradeQueryRequest.getThirdPlatformToDo())) {
            tradeQueryRequest.setFlowStates(
                    Arrays.asList(FlowState.AUDIT, FlowState.DELIVERED_PART));
            tradeQueryRequest.setReturnHasFlag(Boolean.FALSE); // 没有退单
        }

        // BOSS-客户列表-单个客户订单列表不过滤订单类型
        if (Objects.nonNull(tradePageCriteriaRequest.getTradePageDTO())
                && StringUtils.isNotEmpty(tradePageCriteriaRequest.getTradePageDTO().getBuyerId())) {
            tradeQueryRequest.setNoneFilterStoreType(BoolFlag.YES);
        }
        if (tradePageCriteriaRequest.isReturn()) {
            criteria = tradeQueryRequest.getCanReturnCriteria();
        } else {
            criteria = tradeQueryRequest.getWhereCriteria();
        }
        Page<Trade> page = tradeService.page(criteria, tradeQueryRequest);
        MicroServicePage<TradeVO> tradeVOS = KsBeanUtil.convertPage(page, TradeVO.class);
        List<TradeVO> tradeVOList = tradeVOS.getContent();

        if (CollectionUtils.isNotEmpty(tradeVOS.getContent())) {
            //填充团长名称
            if(Boolean.TRUE.equals(tradePageCriteriaRequest.getTradePageDTO().getFillLeaderNameFlag())) {
                this.fillLeaderName(tradeVOList);
            }

            List<String> providerTradeIds =
                    tradeVOS.getContent().stream().map(TradeVO::getId).collect(Collectors.toList());
            //查询订单，是否有售后
            Map<String, List<String>> returnOrderIdMap = returnOrderService.getReturnOrderIdMap(providerTradeIds);
            tradeVOS.getContent()
                    .forEach(trade -> {
                        List<String> returnOrderIdList = returnOrderIdMap.get(trade.getId());
                        if(CollectionUtils.isNotEmpty(returnOrderIdList)){
                            trade.setIsHasPostSales(Boolean.TRUE);
                            trade.setReturnOrderIdList(returnOrderIdList);
                        }
                    });
            // 查询所有的子订单(providerTrade表)
            List<ProviderTrade> providerTradeList =
                    providerTradeService.queryAll(
                            ProviderTradeQueryRequest.builder()
                                    .parentIds(providerTradeIds)
                                    .build());
            if (CollectionUtils.isNotEmpty(providerTradeList)) {
                // 查询主订单编号列表
                tradeVOList.forEach(
                        vo -> {
                            List<TradeVO> items = new ArrayList<>();
                            for (ProviderTrade item : providerTradeList) {
                                if (vo.getId().equals(item.getParentId())) {
                                    TradeVO tradeVO = KsBeanUtil.convert(item, TradeVO.class);
                                    items.add(tradeVO);
                                }
                            }
                            //按照：商家子单>供应商子单>LM子单>京东vop子单排序
                            Collections.sort(
                                    items,
                                    (o1, o2) ->
                                            Objects.isNull(o1.getThirdPlatformType())
                                                    ? -1
                                                    : Objects.isNull(o2.getThirdPlatformType())
                                                    ? 1
                                                    : o1.getThirdPlatformType().compareTo(o2.getThirdPlatformType()));
                            vo.setTradeVOList(items);
                        });

                for (TradeVO tradeVO : tradeVOList) {
                    Boolean isContainsTrade = Boolean.FALSE;
                    if (CollectionUtils.isNotEmpty(tradeVO.getTradeVOList())) {
                        List<Long> storeList =
                                tradeVO.getTradeVOList().stream()
                                        .map(TradeVO::getStoreId)
                                        .collect(Collectors.toList());
                        isContainsTrade = storeList.contains(null);
                    }
                    tradeVO.setIsContainsTrade(isContainsTrade);
                }
                tradeVOS.setContent(tradeVOList);
                return BaseResponse.success(
                        TradePageCriteriaResponse.builder().tradePage(tradeVOS).build());
            } else {
                return BaseResponse.success(
                        TradePageCriteriaResponse.builder().tradePage(tradeVOS).build());
            }
        }
        return BaseResponse.success(
                TradePageCriteriaResponse.builder().tradePage(tradeVOS).build());
    }

    /**
     * @param tradeCountCriteriaRequest 带参分页参数 {@link TradeCountCriteriaRequest}
     * @return
     */
    @Override
    public BaseResponse<TradeCountCriteriaResponse> countCriteria(
            @RequestBody @Valid TradeCountCriteriaRequest tradeCountCriteriaRequest) {
        TradeQueryRequest tradeQueryRequest =
                KsBeanUtil.convert(
                        tradeCountCriteriaRequest.getTradePageDTO(), TradeQueryRequest.class);
        long count = tradeService.countNum(tradeQueryRequest.getWhereCriteria(), tradeQueryRequest);
        return BaseResponse.success(TradeCountCriteriaResponse.builder().count(count).build());
    }

    /**
     * 调用校验与封装单个订单信息
     *
     * @param tradeWrapperBackendCommitRequest 包装信息参数 {@link TradeWrapperBackendCommitRequest}
     * @return 订单信息 {@link TradeWrapperBackendCommitResponse}
     */
    @Override
    public BaseResponse<TradeWrapperBackendCommitResponse> wrapperBackendCommit(
            @RequestBody @Valid TradeWrapperBackendCommitRequest tradeWrapperBackendCommitRequest) {
        Trade trade =
                tradeService.wrapperBackendCommitTrade(
                        tradeWrapperBackendCommitRequest.getOperator(),
                        KsBeanUtil.convert(
                                tradeWrapperBackendCommitRequest.getCompanyInfo(),
                                CompanyInfoVO.class),
                        KsBeanUtil.convert(
                                tradeWrapperBackendCommitRequest.getStoreInfo(),
                                StoreInfoResponse.class),
                        KsBeanUtil.convert(
                                tradeWrapperBackendCommitRequest.getTradeCreate(),
                                TradeCreateRequest.class),
                        tradeWrapperBackendCommitRequest.getIsOpen());
        return BaseResponse.success(
                TradeWrapperBackendCommitResponse.builder()
                        .tradeVO(KsBeanUtil.convert(trade, TradeVO.class))
                        .build());
    }

    /**
     * 查询店铺订单应付的运费
     *
     * @param tradeParamsRequest 包装信息参数 {@link TradeParamsRequest}
     * @return 店铺运费信息 {@link TradeGetFreightResponse}
     */
    @Override
    public BaseResponse<TradeGetFreightResponse> getFreight(
            @RequestBody @Valid TradeParamsRequest tradeParamsRequest) {
        TradeFreightResponse freight =
                tradeService.getFreight(KsBeanUtil.convert(tradeParamsRequest, TradeParams.class));
        return BaseResponse.success(KsBeanUtil.convert(freight, TradeGetFreightResponse.class));
    }

    /**
     * 获取订单商品详情,不包含区间价，会员级别价信息
     *
     * @param tradeGetGoodsRequest 商品skuid列表 {@link TradeGetGoodsRequest}
     * @return 商品信息列表 {@link GoodsInfoViewListResponse}
     */
    @Override
    public BaseResponse<TradeGetGoodsResponse> getGoods(
            @RequestBody @Valid TradeGetGoodsRequest tradeGetGoodsRequest) {
        return BaseResponse.success(
                tradeService.getGoodsResponse(tradeGetGoodsRequest.getSkuIds()));
    }

    /**
     * 发货校验,检查请求发货商品数量是否符合应发货数量
     *
     * @param tradeDeliveryCheckRequest 订单号 物流信息 {@link TradeDeliveryCheckRequest}
     * @return 处理结果 {@link BaseResponse}
     */
    @Override
    public BaseResponse deliveryCheck(
            @RequestBody @Valid TradeDeliveryCheckRequest tradeDeliveryCheckRequest) {
        tradeService.deliveryCheck(
                tradeDeliveryCheckRequest.getTid(),
                KsBeanUtil.convert(
                        tradeDeliveryCheckRequest.getTradeDeliver(), TradeDeliverRequest.class));
        return BaseResponse.SUCCESSFUL();
    }

    /**
     * 支付时，通过id获取交易单信息,不需要加密用户信息
     *
     * @param tradeGetByIdRequest 交易单id {@link TradeGetByIdRequest}
     * @return 交易单信息 {@link TradeGetByIdResponse}
     */
    @Override
    @Transactional
    public BaseResponse<TradeGetByIdResponse> getByIdForBalancePay(
            @RequestBody @Valid TradeGetByIdRequest tradeGetByIdRequest) {
        Trade trade;
        if (StringUtils.isNotBlank(tradeGetByIdRequest.getCustomerId())) {
            trade =
                    tradeService.detail(
                            tradeGetByIdRequest.getTid(), tradeGetByIdRequest.getCustomerId());
        } else {
            trade = tradeService.detail(tradeGetByIdRequest.getTid());
        }
        if (Objects.isNull(trade)) {
            return BaseResponse.success(
                    TradeGetByIdResponse.builder().tradeVO(new TradeVO()).build());
        }
        TradeVO tradeVO = KsBeanUtil.convert(trade, TradeVO.class);
        List<ProviderTrade> providerTrades =
                providerTradeService.queryAll(
                        ProviderTradeQueryRequest.builder().parentId(trade.getId()).build());
        List<TradeVO> providerTradeVOS = KsBeanUtil.convert(providerTrades, TradeVO.class);
        tradeVO.setTradeVOList(providerTradeVOS);

        // 查询linkedmall订单详情
        if (Boolean.TRUE.equals(tradeGetByIdRequest.getNeedLmOrder())
                && CollectionUtils.isNotEmpty(providerTrades)
                && providerTradeVOS.stream()
                .anyMatch(
                        t ->
                                ThirdPlatformType.LINKED_MALL.equals(
                                        t.getThirdPlatformType()))) {
            // 填充并保存linkedmall订单配送信息
            tradeVO = thirdPlatformTradeService.fillLinkedMallTradeDelivers(tradeVO);
        }
        return BaseResponse.success(TradeGetByIdResponse.builder().tradeVO(tradeVO).build());
    }

    /**
     * 通过id获取交易单信息,并将buyer.account加密
     *
     * @param tradeGetByIdRequest 交易单id {@link TradeGetByIdRequest}
     * @return 交易单信息 {@link TradeGetByIdResponse}
     */
    @Override
    @Transactional
    public BaseResponse<TradeGetByIdResponse> getById(
            @RequestBody @Valid TradeGetByIdRequest tradeGetByIdRequest) {
        Trade trade = tradeService.detail(tradeGetByIdRequest.getTid());
        if (Objects.isNull(trade)) {
            return BaseResponse.success(
                    TradeGetByIdResponse.builder().tradeVO(new TradeVO()).build());
        }
        TradeVO tradeVO = KsBeanUtil.convert(trade, TradeVO.class);
        List<ProviderTrade> providerTrades =
                providerTradeService.queryAll(
                        ProviderTradeQueryRequest.builder().parentId(trade.getId()).build());
        List<TradeVO> providerTradeVOS = KsBeanUtil.convert(providerTrades, TradeVO.class);
        providerTradeVOS.forEach(v -> v.setIsAllReturn(tradeService.tradeVerifyAfterProcessingAll(v.getId())));
        tradeVO.setTradeVOList(providerTradeVOS);

        // 查询linkedmall订单详情
        if (Boolean.TRUE.equals(tradeGetByIdRequest.getNeedLmOrder())
                && CollectionUtils.isNotEmpty(providerTrades)
                && providerTradeVOS.stream()
                .anyMatch(
                        t ->
                                ThirdPlatformType.LINKED_MALL.equals(
                                        t.getThirdPlatformType())
                                        || ThirdPlatformType.VOP.equals(t.getThirdPlatformType()))) {
            // 填充并保存linkedmall、京东订单配送信息
            tradeVO = thirdPlatformTradeService.fillLinkedMallTradeDelivers(tradeVO);
        }

        // 判断是否时已支付，且不是已确认状态，调用微信接口更新本地订单状态
        updateOrderStatusWithWechatLogistics(tradeVO, tradeGetByIdRequest, trade);

        getOrderDetails(tradeVO, trade);

        // 查询当前订单是否存在售后
        tradeVO.setIsReturn(tradeService.verifyAfterProcessing(tradeVO.getId()));
        //商品是否全部申请售后
        tradeVO.setIsAllReturn(tradeService.tradeVerifyAfterProcessingAll(tradeVO.getId()));
        //是否有售后商品
        List<ReturnOrder> returnOrderList = returnOrderService.findByTid(tradeVO.getId());
        returnOrderService.goodsIsHasPostSales(tradeVO,returnOrderList);
        tradeVO.setHasReturn(tradeService.checkHasReturn(tradeVO.getId()));
        List<TradeVO> tradeVOList = tradeVO.getTradeVOList();
        if(CollectionUtils.isNotEmpty(tradeVOList)){
            //子单商品是否有售后
            tradeVOList.forEach(childrenTrade->{
                String id = childrenTrade.getId();
                if(NumberUtils.isCreatable(id) || StringUtils.startsWith(id, GeneratorService._PREFIX_TRADE_ID)){
                    List<ReturnOrder> childrenReturnOrderList = returnOrderService.findByTid(id);
                    returnOrderService.goodsIsHasPostSales(childrenTrade,childrenReturnOrderList);
                    return;
                }
                List<ReturnOrder> childrenReturnOrderList = returnOrderService.findByPtid(id);
                returnOrderService.goodsIsHasPostSales(childrenTrade,childrenReturnOrderList);
                childrenTrade.setHasReturn(tradeService.checkHasReturn(childrenTrade.getId()));
            });
        }
        return BaseResponse.success(TradeGetByIdResponse.builder().tradeVO(tradeVO).build());
    }


    private void updateOrderStatusWithWechatLogistics(TradeVO tradeVO, TradeGetByIdRequest tradeGetByIdRequest, Trade trade) {
        LogisticsLogByIdRequest logisticsLogByIdRequest = LogisticsLogByIdRequest.builder()
                .id(tradeGetByIdRequest.getTid())
                .orderNo(tradeGetByIdRequest.getTid())
                .build();

        BaseResponse<LogisticsLogByIdResponse> logByIdResponseBaseResponse = logisticsLogQueryProvider.getByOrderNo(logisticsLogByIdRequest);
        if (!logByIdResponseBaseResponse.isSuccess() || logByIdResponseBaseResponse.getContext() == null) {
            return;
        }

        LogisticsLogVO logisticsLogVO = logByIdResponseBaseResponse.getContext().getLogisticsLogVO();
        if (logisticsLogVO == null || StringUtils.isEmpty(logisticsLogVO.getLogisticNo())) {
            return;
        }

        // operator判空
        if (null == tradeGetByIdRequest.getOperator()) {
            return ;
        }

        try {
            String waybillId = logisticsLogVO.getLogisticNo();
            String waybillToken = getWaybillToken(tradeGetByIdRequest.getTid(), waybillId);

            if (StringUtils.isEmpty(waybillToken)) {
                return;
            }

            tradeVO.setWaybillToken(waybillToken);
            String wxWaybillStatus = getWaybillStatus(tradeGetByIdRequest.getTid(), waybillToken);

            // 获取物流状态
            if (StringUtils.isEmpty(wxWaybillStatus)) {
                return;
            }
            tradeVO.setWaybillStatus(wxWaybillStatus);

            // 判断订单是否完成
            if (trade.getTradeState().getFlowState() == FlowState.COMPLETED) {
                return;
            }

            updateTradeState(tradeVO, tradeGetByIdRequest, trade, wxWaybillStatus);

        } catch (Exception e) {
            // 记录异常日志，遵循异常处理规范
            log.error("物流状态更新失败", e);
            // 根据业务需求进行补偿处理或抛出自定义异常
        }
    }

    private String getWaybillToken(String orderId, String waybillId) {
        WechatWaybillTokenRequest request = WechatWaybillTokenRequest.builder()
                .orderNo(orderId)
                .waybillId(waybillId)
                .build();

        BaseResponse tokenBaseResponse = wechatWaybillProvider.getWaybillToken(request);
        return tokenBaseResponse.isSuccess() ? tokenBaseResponse.getContext().toString() : null;
    }

    private String getWaybillStatus(String orderId, String waybillToken) {
        WechatWaybillStatusRequest request = WechatWaybillStatusRequest.builder()
                .orderNo(orderId)
                .waybill_token(waybillToken)
                .build();

        BaseResponse statusBaseResponse = wechatWaybillProvider.getWaybillStatus(request);
        return statusBaseResponse.isSuccess() && statusBaseResponse.getContext() != null
                ? statusBaseResponse.getContext().toString() : null;
    }

    private void updateTradeState(TradeVO tradeVO, TradeGetByIdRequest tradeGetByIdRequest, Trade trade, String wxWaybillStatus) {
//        FlowState flowState = getFlowStateByWxWaybillStatus(wxWaybillStatus, tradeVO.getTradeState().getFlowState());
//        DeliverStatus deliverStatus = getDeliverStatusByWxWaybillStatus(wxWaybillStatus, tradeVO.getTradeState().getDeliverStatus());
//
//        tradeVO.getTradeState().setFlowState(flowState);
//        tradeVO.getTradeState().setDeliverStatus(deliverStatus);

        TradeEvent event = getTradeEvent(wxWaybillStatus);
        if (event == null) {
            return;
        }

        String tid = trade.getId();
        Operator operator = tradeGetByIdRequest.getOperator();

        StateRequest stateRequest = StateRequest
                .builder()
                .data(trade)
                .tid(tid)
                .operator(operator)
                .event(event)
                .build();

        tradeFSMService.changeState(stateRequest);
        logisticsLogProvider.modifyEndFlagByOrderNo(LogisticsLogModifyEndFlagRequest.builder().orderNo(tid).build());
    }





    private TradeEvent getTradeEvent(String wxWaybillStatus) {
        TradeEvent tradeEvent = null;
        // 判断状态
        // 微信物流信息状态 0: 运单不存在或者未揽收、1: 已揽件、2: 运输中、3: 派件中、4: 已签收、5: 异常、6: 代签收'
        // 订单状态: 0: 创建订单、1: 修改订单、2: 已退款、3: 已审核、4: 部分发货、5: 已发货、6: 已确认、7: 已完成、8: 已作废、9: 已参团、10: 待支付定金、11: 已待支付尾款发货、12: 取消发货、13: 有效邀新订单
        if ("2".equals(wxWaybillStatus) || "3".equals(wxWaybillStatus)) {
            tradeEvent = TradeEvent.DELIVER;
        }
        if ("4".equals(wxWaybillStatus) || "6".equals(wxWaybillStatus)) {
            tradeEvent = TradeEvent.COMPLETE;
        }

        return tradeEvent;
    }

    private DeliverStatus getDeliverStatusByWxWaybillStatus(String wxWaybillStatus, DeliverStatus deliverStatus) {
        DeliverStatus returnDeliverStatus = deliverStatus;
        // 判断状态
        // 微信物流信息状态 0: 运单不存在或者未揽收、1: 已揽件、2: 运输中、3: 派件中、4: 已签收、5: 异常、6: 代签收'
        // 发货状态: 0: 未发货、1: 已发货、2: 部分发货、3: 作废
        if ("2".equals(wxWaybillStatus) || "3".equals(wxWaybillStatus)) {
            returnDeliverStatus = DeliverStatus.SHIPPED;
        }
        return returnDeliverStatus;
    }

    private FlowState getFlowStateByWxWaybillStatus(String wxWaybillStatus, FlowState flowState) {
        FlowState returnFlowState = flowState;
        // 判断状态
        // 微信物流信息状态 0: 运单不存在或者未揽收、1: 已揽件、2: 运输中、3: 派件中、4: 已签收、5: 异常、6: 代签收'
        // 订单状态: 0: 创建订单、1: 修改订单、2: 已退款、3: 已审核、4: 部分发货、5: 已发货、6: 已确认、7: 已完成、8: 已作废、9: 已参团、10: 待支付定金、11: 已待支付尾款发货、12: 取消发货、13: 有效邀新订单
        if ("2".equals(wxWaybillStatus) || "3".equals(wxWaybillStatus)) {
            returnFlowState = FlowState.DELIVERED;
        }
        if ("4".equals(wxWaybillStatus) || "6".equals(wxWaybillStatus)) {
            returnFlowState = FlowState.COMPLETED;
        }

        return returnFlowState;
    }

    private void getOrderDetails(TradeVO tradeVO, Trade trade) {
        //设置支付方式
        if (Objects.nonNull(tradeVO.getPayWay())) {
            Long points = tradeVO.getTradePrice().getPoints();
            PayState payState = tradeVO.getTradeState().getPayState();
            BigDecimal totalPrice = tradeVO.getTradePrice().getTotalPrice();

            StringBuilder sb = new StringBuilder();

            //积分大于0且金额大于0 都是积分+支付
//            if (Objects.nonNull(points) && points > 0
//                    && !tradeVO.getPayWay().equals(PayWay.POINT)
//                    && totalPrice.compareTo(BigDecimal.ZERO) > 0) {
//                sb.append("积分+");
//            }

            sb.append(tradeVO.getPayWay().getDesc());

            //积分支付
            if (Objects.nonNull(points) && points > 0
                    && totalPrice.compareTo(BigDecimal.ZERO) == 0) {
                sb = new StringBuilder();
                sb.append("积分");
            }

            tradeVO.setPayWayValue(sb.toString());

            if (payState.equals(PayState.NOT_PAID)
                    || (totalPrice.compareTo(BigDecimal.ZERO) == 0
                    && (Objects.isNull(points) || points == 0))) {
                tradeVO.setPayWayValue("-");
            }
        }

        //线下支付
        if (Objects.nonNull(tradeVO.getPayInfo())
                && tradeVO.getPayInfo().getPayTypeId().equals(String.valueOf(PayType.OFFLINE.toValue()))) {
            Long points = tradeVO.getTradePrice().getPoints();
            tradeVO.setPayWayValue("线下支付");
//            if (Objects.nonNull(points) && points > 0) {
//                tradeVO.setPayWayValue("积分+线下支付");
//            } else {
//                tradeVO.setPayWayValue("线下支付");
//            }
        }
        if (Objects.nonNull(tradeVO)
                && Objects.nonNull(tradeVO.getBuyer())) {

            if (StringUtils.isNotEmpty(tradeVO.getBuyer().getAccount())) {
                tradeVO.getBuyer()
                        .setAccount(ReturnOrderService.getDexAccount(trade.getBuyer().getAccount()));
            }

//            if(StringUtils.isNotEmpty(tradeVO.getBuyer().getCustomerCardNo())){
//                tradeVO.getBuyer()
//                        .setCustomerCardNo(ReturnOrderService.getDexAccount(trade.getBuyer().getCustomerCardNo()));
//            }
        }
        //自提信息
        if (Objects.nonNull(trade.getPickSettingInfo())) {
            tradeVO.setPickSettingInfo(KsBeanUtil.convert(trade.getPickSettingInfo(), PickSettingInfoVO.class));
        }

        this.setCanReturnNum(tradeVO);

    }

    /**
     * 设置商品可退货数量
     * @param tradeVO
     */
    public void setCanReturnNum(TradeVO tradeVO) {
        //商品可退数量
        if (tradeVO.getTradeState().getDeliverStatus() != DeliverStatus.VOID) {
            Trade trade = KsBeanUtil.convert(tradeVO, Trade.class);
            //计算商品可退数 商品可退数量=购买数量-退货处理中&退货成功的商品数量
            Map<String, Integer> map = returnOrderService.getLeftItems(trade);
            tradeVO.getTradeItems().forEach(
                    item -> item.setCanReturnNum(map.get(item.getSkuId()))
            );
            //计算赠品可退数 赠品可退数量=购买数量-退货处理中&退货成功的赠品数量
            if (CollectionUtils.isNotEmpty(tradeVO.getGifts())) {
                Map<Long, Map<String, Long>> giftMap = returnOrderService.findLeftGiftItems(trade);
                if(giftMap.keySet().size() > 0){
                    tradeVO.getGifts().forEach(
                            item -> item.setCanReturnNum(Integer.parseInt(giftMap.getOrDefault(item.getMarketingIds().get(0), new HashMap<>())
                                    .get(item.getSkuId()).toString()))
                    );
                }
            }
            if (CollectionUtils.isNotEmpty(tradeVO.getPreferential())) {
                // <活动ID, <skuID, 可退数量>>
                Map<Long, Map<String, Long>> returnMap = returnOrderService.findLeftPreferentialItems(trade);
                tradeVO.getPreferential().forEach(
                        item -> item.setCanReturnNum(Integer.parseInt(returnMap.getOrDefault(item.getMarketingIds().get(0), new HashMap<>())
                                .get(item.getSkuId()).toString()))
                );
            }
        }

        if (CollectionUtils.isNotEmpty(tradeVO.getTradeVOList())) {
            List<TradeVO> tradeVOList = tradeVO.getTradeVOList();
            tradeVOList.stream().forEach(t -> {
                Trade trade = KsBeanUtil.convert(t, Trade.class);
                //商品可退数量
                if (t.getTradeState().getDeliverStatus() != DeliverStatus.VOID) {
                    //计算商品可退数 商品可退数量=购买数量-退货处理中&退货成功的商品数量
                    Map<String, Integer> map = returnOrderService.getLeftItems(trade);
                    t.getTradeItems().forEach(
                            item -> item.setCanReturnNum(map.get(item.getSkuId()))
                    );
                    //计算赠品可退数 赠品可退数量=购买数量-退货处理中&退货成功的赠品数量
                    if (CollectionUtils.isNotEmpty(t.getGifts())) {
                        Map<Long, Map<String, Long>> giftMap = returnOrderService.findLeftGiftItems(trade);
                        if(giftMap.keySet().size() > 0){
                            t.getGifts().forEach(
                                    item -> item.setCanReturnNum(Integer.parseInt(
                                            giftMap.getOrDefault(item.getMarketingIds().get(0), new HashMap<>()).get(item.getSkuId()).toString()))
                            );
                        }
                    }

                    if (CollectionUtils.isNotEmpty(t.getPreferential())) {
                        Map<Long, Map<String, Long>> returnMap = returnOrderService.findLeftPreferentialItems(trade);
                        t.getPreferential().forEach(
                                item -> item.setCanReturnNum(Integer.parseInt(
                                        returnMap.getOrDefault(item.getMarketingIds().get(0), new HashMap<>()).get(item.getSkuId()).toString()))
                        );
                    }
                }
            });
        }
    }

    /**
     * 通过id批量获取交易单信息,并将buyer.account加密
     *
     * @param tradeGetByIdsRequest 交易单id {@link TradeGetByIdRequest}
     * @return 交易单信息 {@link TradeGetByIdResponse}
     */
    @Override
    public BaseResponse<TradeGetByIdsResponse> getByIds(
            @Valid TradeGetByIdsRequest tradeGetByIdsRequest) {

        List<Trade> trades = tradeService.details(tradeGetByIdsRequest.getTid());
        if (CollectionUtils.isEmpty(trades)) {
            return BaseResponse.success(
                    TradeGetByIdsResponse.builder().tradeVO(Arrays.asList()).build());
        }
        List<ProviderTrade> providerTrades =
                providerTradeService.queryAll(
                        ProviderTradeQueryRequest.builder()
                                .parentIds(
                                        trades.stream()
                                                .map(Trade::getId)
                                                .collect(Collectors.toList()))
                                .build());

        List<TradeVO> items = new ArrayList<>();
        trades.forEach(
                trade -> {
                    TradeVO tradeVO = KsBeanUtil.convert(trade, TradeVO.class);
                    CreditPayInfo creditPayInfo = trade.getCreditPayInfo();
                    if (Objects.nonNull(creditPayInfo)) {
                        CreditPayInfoVO creditPayInfoVO = new CreditPayInfoVO();
                        BeanUtils.copyProperties(creditPayInfo, creditPayInfoVO);
                        tradeVO.setCreditPayInfo(creditPayInfoVO);
                    }
                    if (CollectionUtils.isNotEmpty(providerTrades)) {
                        // 将子订单填充到相应的父订单中
                        List<PointsTradeVO> item = new ArrayList<>();
                        for (ProviderTrade providerTrade : providerTrades) {
                            if (trade.getId().equals(providerTrade.getParentId())) {
                                PointsTradeVO pointsTradeVO =
                                        KsBeanUtil.convert(providerTrade, PointsTradeVO.class);
                                item.add(pointsTradeVO);
                            }
                        }
                        List<TradeVO> providerTradeVOS = KsBeanUtil.convert(item, TradeVO.class);
                        tradeVO.setTradeVOList(providerTradeVOS);

                        if (Objects.nonNull(tradeVO)
                                && Objects.nonNull(tradeVO.getBuyer())
                                && StringUtils.isNotEmpty(tradeVO.getBuyer().getAccount())) {
                            tradeVO.getBuyer()
                                    .setAccount(
                                            ReturnOrderService.getDexAccount(
                                                    trade.getBuyer().getAccount()));
                        }
                    }
                    items.add(tradeVO);
                });
        return BaseResponse.success(TradeGetByIdsResponse.builder().tradeVO(items).build());
    }

    @Override
    public BaseResponse<TradeListAllResponse> getTradeListByIds(
            @RequestBody @Valid TradeGetByIdListRequest tradeGetByIdListRequest) {
        List<Trade> trades = tradeService.details(tradeGetByIdListRequest.getTidList());
        List<TradeVO> tradeVOList = KsBeanUtil.convert(trades, TradeVO.class);
        if (BoolFlag.YES == tradeGetByIdListRequest.getBoolFlag()) {
            List<ProviderTrade> providerTrades =
                    providerTradeService.queryAll(
                            ProviderTradeQueryRequest.builder()
                                    .parentIds(
                                            tradeVOList.stream()
                                                    .map(TradeVO::getId)
                                                    .collect(Collectors.toList()))
                                    .build());
            // 主单组装子单
            tradeVOList.forEach(
                    tradeVO -> {
                        if (CollectionUtils.isNotEmpty(providerTrades)) {
                            List<ProviderTradeVO> providerTradeVOList = new ArrayList<>();
                            for (ProviderTrade providerTrade : providerTrades) {
                                if (tradeVO.getId().equals(providerTrade.getParentId())) {
                                    ProviderTradeVO providerTradeVO =
                                            KsBeanUtil.convert(
                                                    providerTrade, ProviderTradeVO.class);
                                    providerTradeVOList.add(providerTradeVO);
                                }
                            }
                            tradeVO.setProviderTradeVOList(providerTradeVOList);
                        }
                    });
        }
        return BaseResponse.success(
                TradeListAllResponse.builder().tradeVOList(tradeVOList).build());
    }

    /**
     * 通过id获取交易单信息
     *
     * @param tradeGetByIdRequest 交易单id {@link TradeGetByIdRequest}
     * @return 交易单信息 {@link TradeGetByIdResponse}
     */
    @Override
    public BaseResponse<TradeGetByIdResponse> getOrderById(
            @RequestBody @Valid TradeGetByIdRequest tradeGetByIdRequest) {
        Trade trade = tradeService.detail(tradeGetByIdRequest.getTid());
        BaseResponse<TradeGetByIdResponse> baseResponse =
                BaseResponse.success(
                        TradeGetByIdResponse.builder()
                                .tradeVO(KsBeanUtil.convert(trade, TradeVO.class))
                                .build());
        return baseResponse;
    }

    @Override
    public BaseResponse<TradeListByParentIdResponse> getListByParentId(
            @RequestBody @Valid TradeListByParentIdRequest tradeListByParentIdRequest) {
        List<Trade> tradeList;
        if (StringUtils.isNotBlank(tradeListByParentIdRequest.getCustomerId())) {
            tradeList =
                    tradeService.detailsByParentId(
                            tradeListByParentIdRequest.getParentTid(),
                            tradeListByParentIdRequest.getCustomerId());
        } else {
            tradeList = tradeService.detailsByParentId(tradeListByParentIdRequest.getParentTid());
        }

        if (CollectionUtils.isEmpty(tradeList)) {
            return BaseResponse.success(
                    TradeListByParentIdResponse.builder()
                            .tradeVOList(Collections.emptyList())
                            .build());
        }
        // 父订单号对应的子订单的买家信息应该是相同的
        Trade trade = tradeList.get(0);
        if (Objects.isNull(trade)) {
            return BaseResponse.success(
                    TradeListByParentIdResponse.builder()
                            .tradeVOList(Collections.emptyList())
                            .build());
        }
        // 买家银行账号加密
        if (Objects.nonNull(trade)
                && Objects.nonNull(trade.getBuyer())
                && StringUtils.isNotEmpty(trade.getBuyer().getAccount())) {
            trade.getBuyer()
                    .setAccount(ReturnOrderService.getDexAccount(trade.getBuyer().getAccount()));
        }
        final Buyer buyer = trade.getBuyer();
        // 统一设置账号加密后的买家信息
        List<TradeVO> tradeVOList =
                tradeList.stream()
                        .map(
                                i -> {
                                    i.setBuyer(buyer);
                                    return KsBeanUtil.convert(i, TradeVO.class);
                                })
                        .collect(Collectors.toList());
        return BaseResponse.success(
                TradeListByParentIdResponse.builder().tradeVOList(tradeVOList).build());
    }

    @Override
    public BaseResponse<TradeListByParentIdResponse> getOrderListByParentId(
            @RequestBody @Valid TradeListByParentIdRequest tradeListByParentIdRequest) {
        List<Trade> tradeList =
                tradeService.detailsByParentId(tradeListByParentIdRequest.getParentTid());
        if (tradeList.isEmpty()) {
            return BaseResponse.success(
                    TradeListByParentIdResponse.builder()
                            .tradeVOList(Collections.emptyList())
                            .build());
        }
        // 统一设置账号加密后的买家信息
        List<TradeVO> tradeVOList =
                tradeList.stream()
                        .map(
                                i -> {
                                    return KsBeanUtil.convert(i, TradeVO.class);
                                })
                        .collect(Collectors.toList());
        return BaseResponse.success(
                TradeListByParentIdResponse.builder().tradeVOList(tradeVOList).build());
    }

    /**
     * 验证订单是否存在售后申请
     *
     * @param tradeVerifyAfterProcessingRequest 交易单id {@link TradeVerifyAfterProcessingRequest}
     * @return 验证结果 {@link TradeVerifyAfterProcessingResponse}
     */
    @Override
    public BaseResponse<TradeVerifyAfterProcessingResponse> verifyAfterProcessing(
            @RequestBody @Valid
                    TradeVerifyAfterProcessingRequest tradeVerifyAfterProcessingRequest) {
        return BaseResponse.success(
                TradeVerifyAfterProcessingResponse.builder()
                        .verifyResult(
                                tradeService.tradeVerifyAfterProcessingAll(
                                        tradeVerifyAfterProcessingRequest.getTid()))
                        .build());
    }

    @Override
    public BaseResponse<TradeVerifyAfterProcessingResponse> verifyProcessing(@RequestBody @Valid TradeVerifyAfterProcessingRequest tradeVerifyAfterProcessingRequest) {
        return BaseResponse.success(TradeVerifyAfterProcessingResponse.builder().
                verifyResult(tradeService.verifyAfterProcessing(tradeVerifyAfterProcessingRequest.getTid())).build());
    }

    /**
     * 验证订单是否存在售后申请
     *
     * @param providerTradeVerifyAfterProcessingRequest 交易单id {@link
     *                                                  TradeVerifyAfterProcessingRequest}
     * @return 验证结果 {@link TradeVerifyAfterProcessingResponse}
     */
    @Override
    public BaseResponse<TradeVerifyAfterProcessingResponse> providerVerifyAfterProcessing(
            @RequestBody @Valid
                    ProviderTradeVerifyAfterProcessingRequest
                    providerTradeVerifyAfterProcessingRequest) {
        return BaseResponse.success(
                TradeVerifyAfterProcessingResponse.builder()
                        .verifyResult(
                                tradeService.tradeVerifyAfterProcessingAll(
                                        providerTradeVerifyAfterProcessingRequest.getPtid()))
                        .build());
    }

    /**
     * 条件查询所有订单
     *
     * @param tradeListAllRequest 查询条件 {@link TradeListAllRequest}
     * @return 验证结果 {@link TradeListAllResponse}
     */
    @Override
    public BaseResponse<TradeListAllResponse> listAll(
            @RequestBody @Valid TradeListAllRequest tradeListAllRequest) {
        List<Trade> trades =
                tradeService.queryAll(
                        KsBeanUtil.convert(
                                tradeListAllRequest.getTradeQueryDTO(), TradeQueryRequest.class));
        return BaseResponse.success(
                TradeListAllResponse.builder()
                        .tradeVOList(KsBeanUtil.convert(trades, TradeVO.class))
                        .build());
    }


    /**
     * 条件查询所有订单（分页）
     *
     * @param tradeListAllRequest 查询条件 {@link TradeListAllRequest}
     * @return 验证结果 {@link TradeListAllResponse}
     */
    @Override
    public BaseResponse<TradeListAllResponse> pageAll(
            @RequestBody @Valid TradeListAllRequest tradeListAllRequest) {
        TradeQueryRequest request = KsBeanUtil.convert(
                tradeListAllRequest.getTradeQueryDTO(), TradeQueryRequest.class);
        List<Trade> trades = tradeService.page(request.getWhereCriteria(), request).getContent();
        return BaseResponse.success(
                TradeListAllResponse.builder()
                        .tradeVOList(KsBeanUtil.convert(trades, TradeVO.class))
                        .build());
    }

    /**
     * 获取支付单
     *
     * @param tradeGetPayOrderByIdRequest 支付单号 {@link TradeGetPayOrderByIdRequest}
     * @return 支付单 {@link TradeGetPayOrderByIdResponse}
     */
    @Override
    public BaseResponse<TradeGetPayOrderByIdResponse> getPayOrderById(
            @RequestBody @Valid TradeGetPayOrderByIdRequest tradeGetPayOrderByIdRequest) {
        PayOrder payOrder = tradeService.findPayOrder(tradeGetPayOrderByIdRequest.getPayOrderId());
        return BaseResponse.success(
                TradeGetPayOrderByIdResponse.builder()
                        .payOrder(KsBeanUtil.convert(payOrder, PayOrderVO.class))
                        .build());
    }

    /**
     * 查询订单信息作为结算原始数据
     *
     * @param tradePageForSettlementRequest 查询分页参数 {@link TradePageForSettlementRequest}
     * @return 支付单集合 {@link TradePageForSettlementResponse}
     */
    @Override
    public BaseResponse<TradePageForSettlementResponse> pageForSettlement(
            @RequestBody @Valid TradePageForSettlementRequest tradePageForSettlementRequest) {
        List<Trade> tradeList =
                tradeService.findTradeListForSettlement(
                        tradePageForSettlementRequest.getStoreId(),
                        tradePageForSettlementRequest.getStartTime(),
                        tradePageForSettlementRequest.getEndTime(),
                        tradePageForSettlementRequest.getPageRequest());
        return BaseResponse.success(
                TradePageForSettlementResponse.builder()
                        .tradeVOList(KsBeanUtil.convert(tradeList, TradeVO.class))
                        .build());
    }

    /**
     * 根据快照封装订单确认页信息
     *
     * @param tradeQueryPurchaseInfoRequest 交易单快照信息 {@link TradeQueryPurchaseInfoRequest}
     * @return 交易单确认项 {@link TradeQueryPurchaseInfoResponse}
     */
    @Override
    public BaseResponse<TradeQueryPurchaseInfoResponse> queryPurchaseInfo(
            @RequestBody @Valid TradeQueryPurchaseInfoRequest tradeQueryPurchaseInfoRequest) {
        TradeItemGroup tradeItemGroup = KsBeanUtil.convert(tradeQueryPurchaseInfoRequest.getTradeItemGroupDTO(),
                TradeItemGroup.class);
        // 判断是否是O2O
        if(StoreType.O2O.equals(tradeItemGroup.getSupplier().getStoreType())){
            tradeItemGroup.setPluginType(PluginType.O2O);
        } else {
            tradeItemGroup.setPluginType(PluginType.NORMAL);
        }
        TradeConfirmItem tradeConfirmItem = tradeServiceInterface.getPurchaseInfo(tradeItemGroup,KsBeanUtil.convert(
                                tradeQueryPurchaseInfoRequest.getTradeItemList(), TradeItem.class));
        return BaseResponse.success(TradeQueryPurchaseInfoResponse.builder().tradeConfirmItemVO(
                                KsBeanUtil.convert(tradeConfirmItem, TradeConfirmItemVO.class)).build());
    }

    /**
     * 用于编辑订单前的展示信息，包含了原订单信息和最新关联的订单商品价格（计算了会员价和级别价后的商品单价）
     *
     * @param tradeGetRemedyByTidRequest 交易单id {@link TradeGetRemedyByTidRequest}
     * @return 废弃单 {@link TradeGetRemedyByTidResponse}
     */
    @Override
    public BaseResponse<TradeGetRemedyByTidResponse> getRemedyByTid(
            @RequestBody @Valid TradeGetRemedyByTidRequest tradeGetRemedyByTidRequest) {
        TradeRemedyDetails tradeRemedyDetails =
                tradeService.getTradeRemedyDetails(tradeGetRemedyByTidRequest.getTid());
        return BaseResponse.success(
                TradeGetRemedyByTidResponse.builder()
                        .tradeRemedyDetailsVO(
                                KsBeanUtil.convert(tradeRemedyDetails, TradeRemedyDetailsVO.class))
                        .build());
    }

    /**
     * 查询客户首笔完成的交易号
     *
     * @param request
     * @return
     */
    @Override
    public BaseResponse<TradeQueryFirstCompleteResponse> queryFirstCompleteTrade(
            @RequestBody @Valid TradeQueryFirstCompleteRequest request) {
        String tradeId = tradeService.queryFirstCompleteTrade(request.getCustomerId());
        return BaseResponse.success(
                TradeQueryFirstCompleteResponse.builder().tradeId(tradeId).build());
    }

    /**
     * 查询客户首笔完成的交易号
     *
     * @param request
     * @return
     */
    @Override
    public BaseResponse<TradeQueryFirstCompleteResponse> queryFirstPayTrade(
            @RequestBody @Valid TradeQueryFirstCompleteRequest request) {
        String tradeId = tradeService.queryFirstPayTrade(request.getCustomerId());
        return BaseResponse.success(
                TradeQueryFirstCompleteResponse.builder().tradeId(tradeId).build());
    }


    /**
     * 订单选择银联企业支付通知财务
     *
     * @param tradeSendEmailToFinanceRequest 邮箱信息 {@link TradeSendEmailToFinanceRequest}
     * @return 发送结果 {@link BaseResponse}
     */
    @Override
    public BaseResponse sendEmailToFinance(
            @RequestBody @Valid TradeSendEmailToFinanceRequest tradeSendEmailToFinanceRequest) {
        tradeService.sendEmailToFinance(
                tradeSendEmailToFinanceRequest.getCustomerId(),
                tradeSendEmailToFinanceRequest.getOrderId(),
                tradeSendEmailToFinanceRequest.getUrl());
        return BaseResponse.SUCCESSFUL();
    }

    /**
     * 查询导出数据
     *
     * @param tradeListExportRequest 查询条件 {@link TradeListExportRequest}
     * @return 验证结果 {@link TradeListExportResponse}
     */
    @Override
    public BaseResponse<TradeListExportResponse> listTradeExport(
            @RequestBody @Valid TradeListExportRequest tradeListExportRequest) {
        TradeQueryRequest tradeQueryRequest =
                KsBeanUtil.convert(
                        tradeListExportRequest.getTradeQueryDTO(), TradeQueryRequest.class);

        // 默认不查跨境订单
        tradeQueryRequest.setCrossBorderFlag(Boolean.FALSE);

        // 查看渠道待处理就显示待发货和部分发货
        if (Boolean.TRUE.equals(tradeQueryRequest.getThirdPlatformToDo())) {
            tradeQueryRequest.setFlowStates(
                    Arrays.asList(FlowState.AUDIT, FlowState.DELIVERED_PART));
            tradeQueryRequest.setReturnHasFlag(Boolean.FALSE); // 没有退单
        }

        // Modify by zhengyang 统一列表和导出的查询逻辑
        if (StringUtils.isNotBlank(tradeQueryRequest.getProviderName())
                || StringUtils.isNotBlank(tradeQueryRequest.getProviderCode())
                || StringUtils.isNotBlank(tradeQueryRequest.getProviderTradeId())) {
            List<ProviderTrade> providerTrades =
                    providerTradeService.queryAll(
                            ProviderTradeQueryRequest.builder()
                                    .id(tradeQueryRequest.getProviderTradeId())
                                    .providerName(tradeQueryRequest.getProviderName())
                                    .providerCode(tradeQueryRequest.getProviderCode())
                                    .build());
            if (CollectionUtils.isNotEmpty(providerTrades)) {
                tradeQueryRequest.setIds(
                        providerTrades.stream()
                                .map(ProviderTrade::getParentId)
                                .toArray(String[]::new));
                tradeQueryRequest.setId(null);
                tradeQueryRequest.setProviderCode(null);
                tradeQueryRequest.setProviderName(null);
            } else {
                return BaseResponse.success(
                        TradeListExportResponse.builder().tradeVOList(new ArrayList<>()).build());
            }
        }
        TradeQueryDTO dto = tradeListExportRequest.getTradeQueryDTO();
        if (Objects.nonNull(dto.getQueryOrderType())) {
            switch (dto.getQueryOrderType()) {
                case GROUPON:
                    tradeQueryRequest.setGrouponFlag(Boolean.TRUE);
                    break;
                case FLASH_SALE:
                    tradeQueryRequest.setFlashSaleFlag(Boolean.TRUE);
                    break;
                case BOOKING_SALE:
                    tradeQueryRequest.setBookingSaleFlag(Boolean.TRUE);
                    break;
                case BUY_POINTS_ORDER:
                    tradeQueryRequest.setOrderType(OrderType.NORMAL_ORDER);
                    break;
                case BARGAIN:
                    tradeQueryRequest.setBargainFlag(Boolean.TRUE);
                    break;
                case BUY_CYCLE:
                    tradeQueryRequest.setBuyCycleFlag(Boolean.TRUE);
                    break;
                default:
                    break;
            }
        }

        List<Trade> tradeList = tradeService.listTradeExport(tradeQueryRequest);
        List<TradeVO> tradeVoList = KsBeanUtil.convert(tradeList, TradeVO.class);
        //填充团长名称
        if(Boolean.TRUE.equals(tradeListExportRequest.getTradeQueryDTO().getFillLeaderNameFlag())) {
            this.fillLeaderName(tradeVoList);
        }
        return BaseResponse.success(
                TradeListExportResponse.builder()
                        .tradeVOList(tradeVoList)
                        .build());
    }

    @Override
    public BaseResponse<Long> countTradeExport(@Valid TradeListExportRequest tradeListExportRequest) {
        TradeQueryRequest tradeQueryRequest =
                KsBeanUtil.convert(
                        tradeListExportRequest.getTradeQueryDTO(), TradeQueryRequest.class);

        // 查看渠道待处理就显示待发货和部分发货
        if (Boolean.TRUE.equals(tradeQueryRequest.getThirdPlatformToDo())) {
            tradeQueryRequest.setFlowStates(
                    Arrays.asList(FlowState.AUDIT, FlowState.DELIVERED_PART));
            tradeQueryRequest.setReturnHasFlag(Boolean.FALSE); // 没有退单
        }

        // Modify by zhengyang 统一列表和导出的查询逻辑
        if (StringUtils.isNotBlank(tradeQueryRequest.getProviderName())
                || StringUtils.isNotBlank(tradeQueryRequest.getProviderCode())
                || StringUtils.isNotBlank(tradeQueryRequest.getProviderTradeId())) {
            List<ProviderTrade> providerTrades =
                    providerTradeService.queryAll(
                            ProviderTradeQueryRequest.builder()
                                    .id(tradeQueryRequest.getProviderTradeId())
                                    .providerName(tradeQueryRequest.getProviderName())
                                    .providerCode(tradeQueryRequest.getProviderCode())
                                    .build());
            if (CollectionUtils.isNotEmpty(providerTrades)) {
                tradeQueryRequest.setIds(
                        providerTrades.stream()
                                .map(ProviderTrade::getParentId)
                                .toArray(String[]::new));
                tradeQueryRequest.setId(null);
                tradeQueryRequest.setProviderCode(null);
                tradeQueryRequest.setProviderName(null);
            } else {
                return BaseResponse.success(NumberUtils.LONG_ZERO);
            }
        }
        TradeQueryDTO dto = tradeListExportRequest.getTradeQueryDTO();
        if (Objects.nonNull(dto.getQueryOrderType())) {
            switch (dto.getQueryOrderType()) {
                case GROUPON:
                    tradeQueryRequest.setGrouponFlag(Boolean.TRUE);
                    break;
                case FLASH_SALE:
                    tradeQueryRequest.setFlashSaleFlag(Boolean.TRUE);
                    break;
                case BOOKING_SALE:
                    tradeQueryRequest.setBookingSaleFlag(Boolean.TRUE);
                    break;
                case BUY_POINTS_ORDER:
                    tradeQueryRequest.setOrderType(OrderType.NORMAL_ORDER);
                    break;
                case BARGAIN:
                    tradeQueryRequest.setBargainFlag(Boolean.TRUE);
                    break;
                case BUY_CYCLE:
                    tradeQueryRequest.setBuyCycleFlag(Boolean.TRUE);
                    break;
                default:
                    break;
            }
        }
        return BaseResponse.success(tradeService.countNum(tradeQueryRequest.getWhereCriteria(), tradeQueryRequest));
    }

    /**
     * 根据支付单查询
     *
     * @param tradeByPayOrderIdRequest 父交易单id {@link TradeByPayOrderIdRequest}
     * @return
     */
    @Override
    public BaseResponse<TradeByPayOrderIdResponse> getOrderByPayOrderId(
            @RequestBody @Valid TradeByPayOrderIdRequest tradeByPayOrderIdRequest) {
        Trade trade =
                tradeService
                        .queryAll(
                                TradeQueryRequest.builder()
                                        .payOrderId(tradeByPayOrderIdRequest.getPayOrderId())
                                        .build())
                        .get(0);
        List<ProviderTrade> providerTrades =
                providerTradeService.queryAll(
                        ProviderTradeQueryRequest.builder().parentId(trade.getId()).build());
        List<TradeVO> providerTradeVOS = KsBeanUtil.convert(providerTrades, TradeVO.class);
        if (Objects.nonNull(trade)
                && Objects.nonNull(trade.getBuyer())
                && StringUtils.isNotEmpty(trade.getBuyer().getAccount())) {
            trade.getBuyer()
                    .setAccount(ReturnOrderService.getDexAccount(trade.getBuyer().getAccount()));
        }
        BaseResponse<TradeByPayOrderIdResponse> baseResponse =
                BaseResponse.success(
                        TradeByPayOrderIdResponse.builder()
                                .tradeVO(KsBeanUtil.convert(trade, TradeVO.class))
                                .build());
        baseResponse.getContext().getTradeVO().setTradeVOList(providerTradeVOS);
        return baseResponse;
    }

    @Override
    public BaseResponse<TradePageCriteriaResponse> pageCriteriaOptimize(
            @RequestBody @Valid TradePageCriteriaRequest tradePageCriteriaRequest) {
        TradeQueryRequest tradeQueryRequest =
                tradeMapper.tradeDtoToTradeQueryRequest(tradePageCriteriaRequest.getTradePageDTO());
        if (Objects.nonNull(tradeQueryRequest.getQueryOrderType())) {
            switch (tradeQueryRequest.getQueryOrderType()) {
                case GROUPON:
                    tradeQueryRequest.setGrouponFlag(Boolean.TRUE);
                    break;
                case FLASH_SALE:
                    tradeQueryRequest.setFlashSaleFlag(Boolean.TRUE);
                    break;
                case BOOKING_SALE:
                    tradeQueryRequest.setBookingSaleFlag(Boolean.TRUE);
                    break;
                default:
                    break;
            }
        }

        Criteria criteria;
        if (tradePageCriteriaRequest.isReturn()) {
            criteria = tradeQueryRequest.getCanReturnCriteria();
        } else {
            criteria = tradeQueryRequest.getWhereCriteria();
        }
        return BaseResponse.success(
                TradePageCriteriaResponse.builder()
                        .tradePage(tradeService.pageOptimize(criteria, tradeQueryRequest))
                        .build());
    }

    @Override
    public BaseResponse<LogisticNoRepeatResponse> getRepeatLogisticNo(
            @Valid @RequestBody LogisticsRepeatRequest logisticsRepeatRequest) {
        List<String> repeatLogisticNoList =
                tradeOptimizeService.verifyLogisticNo(logisticsRepeatRequest.getLogisticsDTOList());
        return BaseResponse.success(
                LogisticNoRepeatResponse.builder().logisticNoList(repeatLogisticNoList).build());
    }

    @Override
    public BaseResponse<CreditTradeVOPageResponse> findCreditUsedPage(
            @RequestBody @Valid CreditTradePageRequest request) {
        CreditTradeVOPageResponse creditUsedTrade =
                creditTradeQueryService.findCreditUsedTrade(request);
        return BaseResponse.success(creditUsedTrade);
    }

    @Override
    public BaseResponse<CreditTradeVOPageResponse> findCreditRepayPage(
            @RequestBody @Valid CreditTradePageRequest request) {
        CreditTradeVOPageResponse creditRepayOrder =
                creditTradeQueryService.findCreditRepayOrder(request);
        return BaseResponse.success(creditRepayOrder);
    }

    @Override
    public BaseResponse<TradeListByParentIdResponse> selectListByidOrPid(TradeListByIdOrPidRequest tradeListByIdOrPidRequest) {
        String tid = tradeListByIdOrPidRequest.getTid();
        String pid = tradeListByIdOrPidRequest.getParentTid();
        TradeVO tradeVO = getById(TradeGetByIdRequest.builder().tid(tid).build()).getContext().getTradeVO();
        List<TradeVO> tradeVOList = new ArrayList<>();
        if (tradeVO != null) {
            tradeVOList.add(tradeVO);
        } else {
            tradeVOList = selectListByParentId(
                    TradeListByParentIdRequest.builder()
                            .parentTid(pid).build())
                    .getContext().getTradeVOList();
        }
        return BaseResponse.success(TradeListByParentIdResponse.builder().tradeVOList(tradeVOList).build());
    }

    @Override
    public BaseResponse<CountByNotWrittenOffOrderResponse> countByNotWrittenOffOrder(@RequestBody @Valid CountByNotWrittenOffOrderRequest request) {

        TradeCriteriaRequest dto = new TradeCriteriaRequest();
        dto.setPickupFlag(Boolean.TRUE);
        List<FlowState> list = new ArrayList<>();
        list.add(FlowState.AUDIT);
        list.add(FlowState.DELIVERED);
        dto.setFlowStates(list);

        if (request.getIsMasterAccount()) {

            dto.setPickupStoreId(request.getStoreId());
        } else {
            if (CollectionUtils.isNotEmpty(request.getPickupIds())) {
                dto.setPickupIds(request.getPickupIds());
            } else {
                dto.setNoEmployeePickupIds(request.getNoEmployeePickupIds());
            }
        }

        return BaseResponse.success(tradeService.countByNotWrittenOffOrder(dto));
    }

    @Override
    public BaseResponse<OrderDetailsByWriteOffCodeResponse> orderDetailsByWriteOffCode(@RequestBody @Valid WriteOffCodeRequest request) {

        Trade trade = tradeService.orderDetailsByWriteOffCode(request);
        if(Objects.nonNull(trade) && Objects.nonNull(trade.getIsBookingSaleGoods()) && trade.getIsBookingSaleGoods()
            && Objects.nonNull(trade.getBookingType()) && trade.getBookingType() == BookingType.EARNEST_MONEY
            && StringUtils.isBlank(trade.getTailOrderNo())){
            throw new SbcRuntimeException(OrderErrorCodeEnum.K050104);
        }
        if (Objects.isNull(trade)) {
            throw new SbcRuntimeException(OrderErrorCodeEnum.K050105);
        }

        Boolean virtualFlag = Objects.nonNull(trade.getOrderTag()) &&
                Boolean.TRUE.equals(trade.getOrderTag().getVirtualFlag());

        if (!virtualFlag && CollectionUtils.isNotEmpty(request.getPickupIds()) &&
                !request.getPickupIds().contains(trade.getPickSettingInfo().getId())){
            throw new SbcRuntimeException(OrderErrorCodeEnum.K050105);
        }

        TradeVO tradeVO = KsBeanUtil.convert(trade, TradeVO.class);

        tradeService.checkWriteOffOrder(tradeVO,request);

        getOrderDetails(tradeVO, trade);

        //过滤非自营商品
        tradeVO.setTradeItems(tradeVO.getTradeItems().stream().filter(item -> Objects.isNull(item.getProviderId())).collect(Collectors.toList()));
        return BaseResponse.success(new OrderDetailsByWriteOffCodeResponse(tradeVO));
    }

    @Override
    public BaseResponse<OrderReturnItemNumResponse> findReturnItemNum(@RequestBody @Valid OrderReturnItemNumRequest request) {
        Map<String, Integer> returnItemNum = tradeService.getReturnItemNum(request.getId(), Boolean.FALSE);
        Map<Long, Map<String, Integer>> returnGiftsNum =
                tradeService.getGiftReturnItemNum(request.getId());
        return BaseResponse.success(OrderReturnItemNumResponse.builder().returnItemMap(returnItemNum).returnGiftsMap(returnGiftsNum).build());
    }

    /**
     * @param validateTradeAndAccountRequest 参数 {@link ValidateTradeAndAccountRequest}
     * @return
     */
    @Override
    public BaseResponse<ValidateTradeAndAccountResponse> validateTradeAndAccount(
            @RequestBody @Valid ValidateTradeAndAccountRequest validateTradeAndAccountRequest) {
        // 查询未完成订单
        TradeQueryRequest tradeQueryRequest = new TradeQueryRequest();
        tradeQueryRequest.setBuyerId(validateTradeAndAccountRequest.getBuyerId());
        tradeQueryRequest.setIsBoss(false);
        tradeQueryRequest.setLogoutValidate(Constants.ONE);
        long noFinishCount = tradeService.countNum(tradeQueryRequest.getWhereCriteria(), tradeQueryRequest);
        // 查询未过售后期订单
        tradeQueryRequest.setLogoutValidate(Constants.TWO);
        long noAfterSaleCount = tradeService.countNum(tradeQueryRequest.getWhereCriteria(), tradeQueryRequest);
        // 查询未完成退单
        ReturnQueryRequest returnQueryRequest = new ReturnQueryRequest();
        returnQueryRequest.setBuyerId(validateTradeAndAccountRequest.getBuyerId());
        returnQueryRequest.setPlatform(validateTradeAndAccountRequest.getPlatform());
        returnQueryRequest.setLogoutValidate(Constants.ONE);
        long noFinishReturn = returnOrderService.countNum(returnQueryRequest);
        // 未完成的积分订单
        PointsTradeQueryRequest pointsTradeQueryRequest = new PointsTradeQueryRequest();
        pointsTradeQueryRequest.setBuyerId(validateTradeAndAccountRequest.getBuyerId());
        pointsTradeQueryRequest.setOrderType(OrderType.POINTS_ORDER);
        List<FlowState> flowStates = Lists.newArrayList();
        flowStates.add(FlowState.AUDIT);
        flowStates.add(FlowState.DELIVERED_PART);
        flowStates.add(FlowState.DELIVERED);
        pointsTradeQueryRequest.setFlowStates(flowStates);
        Criteria criteria = pointsTradeQueryRequest.getWhereCriteria();
        long pointCount = pointsTradeService.countNum(criteria, pointsTradeQueryRequest);
        return BaseResponse.success(ValidateTradeAndAccountResponse.builder().count(noFinishCount+noAfterSaleCount+noFinishReturn).pointCount(pointCount).build());
    }

    @Override
    public BaseResponse<TradeEconomicalPageResponse> economicalPage(@RequestBody @Valid TradeEconomicalPageRequest tradeEconomicalPageRequest) {
        TradeQueryRequest tradeQueryRequest =
                tradeMapper.tradeDtoToTradeQueryRequest(tradeEconomicalPageRequest.getTradePageDTO());
        Criteria criteria = tradeQueryRequest.getWhereCriteria();
        MicroServicePage<TradeVO> tradePage = tradeService.economicalPage(criteria, tradeQueryRequest);
        return BaseResponse.success(
                TradeEconomicalPageResponse.builder()
                        .tradePage(tradePage)
                        .build());
    }

    /***
     * 判断是否查询已审核且未支付订单的条件
     * @return
     */
    @Override
    public BaseResponse<TradeListAllResponse> countDown(ValidateTradeAndAccountRequest request) {
        //判断订单倒计时提醒开关是否打开
        SystemConfigQueryRequest queryRequest = new SystemConfigQueryRequest();
        queryRequest.setConfigKey(ConfigKey.ORDERSETTING.toString());
        List<SystemConfigVO> systemConfigVOS = systemConfigQueryProvider.list(queryRequest).getContext().getSystemConfigVOList();

        for (int i = 0; i < systemConfigVOS.size(); i++){
            SystemConfigVO systemConfigVO = systemConfigVOS.get(i);
            if (systemConfigVO.getConfigType().equals(ConfigType.ORDER_SETTING_COUNTDOWN.toValue())){
                if (systemConfigVO.getStatus() == Constants.ZERO){
                    return BaseResponse.success(TradeListAllResponse.builder()
                            .tradeVOList(Lists.newArrayList())
                            .build());
                }
            }
        }
        TradeQueryRequest tradeQueryRequest = TradeQueryRequest.builder()
                .tradeState(TradeState.builder()
                        .auditState(AuditState.CHECKED)
                        .payState(PayState.NOT_PAID)
                        .build())
                .buyerId(request.getBuyerId())
                .orderTimeOut(LocalDateTime.now())
                .isBoss(Boolean.FALSE)
                .build();
        //查询已审核且未支付的订单
        List<Trade> trades = tradeService.queryAllPage(tradeQueryRequest, Constants.NUM_30);
        if (CollectionUtils.isNotEmpty(trades)){
            trades = trades.stream()
                    .filter(trade -> {
                        //过滤掉线下支付订单
                        if (String.valueOf(PayType.OFFLINE.toValue()).equals(trade.getPayInfo().getPayTypeId())){
                            return false;
                        }
                        //过滤掉定金预售，未到支付尾款时间的订单
                        TradeState tradeState = trade.getTradeState();
                        if (PayState.PAID_EARNEST == tradeState.getPayState()){
                            LocalDateTime tailStartTime = tradeState.getTailStartTime();
                            if (tailStartTime.isAfter(LocalDateTime.now())){
                                return false;
                            }
                        }
                        return true;
                    }).collect(Collectors.toList());
        }

        return BaseResponse.success(
                TradeListAllResponse.builder()
                        .tradeVOList(KsBeanUtil.convert(trades, TradeVO.class))
                        .build());
    }


    /**
     * 通过父订单号获取交易单集合
     *
     * @param tradeListByParentIdRequest
     * @return
     */
    private BaseResponse<TradeListByParentIdResponse> selectListByParentId(@RequestBody @Valid TradeListByParentIdRequest tradeListByParentIdRequest) {
        List<Trade> tradeList = tradeService.findByParentId(tradeListByParentIdRequest.getParentTid());
        if (tradeList.isEmpty()) {
            return BaseResponse.success(TradeListByParentIdResponse.builder().tradeVOList(Collections.emptyList()).build());
        } else {
            return BaseResponse.success(TradeListByParentIdResponse.builder().
                    tradeVOList(KsBeanUtil.convertList(tradeList, TradeVO.class)).build());
        }
    }

    /**
     * 通过父订单号获取交易单集合
     *
     * @param tradeListByGrouponNoRequest
     * @return
     */
    @Override
    public BaseResponse<TradeListByGrouponNoResponse> getTradeByGrouponNo(@RequestBody @Valid TradeListByGrouponNoRequest tradeListByGrouponNoRequest) {
        List<Trade> tradeList = grouponOrderService.getTradeByGrouponNo(tradeListByGrouponNoRequest.getGrouponNo());
        if (tradeList.isEmpty()) {
            return BaseResponse.success(TradeListByGrouponNoResponse.builder().tradeVOList(Collections.emptyList()).build());
        } else {
            return BaseResponse.success(TradeListByGrouponNoResponse.builder().
                    tradeVOList(KsBeanUtil.convertList(tradeList, TradeVO.class)).build());
        }
    }

    @Override
    public BaseResponse<FindByTailOrderNoInResponse> findByTailOrderNoIn(@RequestBody FindByTailOrderNoInRequest findByTailOrderNoInRequest){
        List<Trade> trades = tradeService.findByTailOrderNoIn(findByTailOrderNoInRequest.getTailOrderIds());
        return BaseResponse.success(FindByTailOrderNoInResponse.builder().tradeVOList(KsBeanUtil.convert(trades,
                TradeVO.class)).build());
    }

    @Override
    public BaseResponse<Long> findForEfficientTailOrder(){
        return BaseResponse.success(tradeService.queryForEfficientTailOrder());
    }

    /**
     * 填充团长名称
     * @param tradeVOList
     */
    private void fillLeaderName(List<TradeVO> tradeVOList) {
        Map<String, String> leaderNameMap = Maps.newHashMap();
        List<String> leaderIds = tradeVOList.stream()
                .filter(s -> s.getCommunityTradeCommission() != null
                        && StringUtils.isNotBlank(s.getCommunityTradeCommission().getLeaderId()))
                .map(s -> s.getCommunityTradeCommission().getLeaderId()).collect(Collectors.toList());
        if (CollectionUtils.isNotEmpty(leaderIds)) {
            CommunityLeaderListRequest listRequest = CommunityLeaderListRequest.builder().leaderIdList(leaderIds).build();
            leaderNameMap.putAll(communityLeaderQueryProvider.list(listRequest).getContext().getCommunityLeaderList().stream().collect(Collectors.toMap(CommunityLeaderVO::getLeaderId, CommunityLeaderVO::getLeaderName)));
        }
        tradeVOList.forEach(tradeVO -> {
            if (tradeVO.getCommunityTradeCommission() != null
                    && StringUtils.isNotBlank(tradeVO.getCommunityTradeCommission().getLeaderId())) {
                tradeVO.getCommunityTradeCommission().setLeaderName(leaderNameMap.get(tradeVO.getCommunityTradeCommission().getLeaderId()));
            }
        });
    }

    @Override
    public BaseResponse<TradeListCriteriaResponse> listCriteria(TradeListCriteriaRequest tradeListCriteriaRequest) {


        // 根据providerTradeId模糊查询ProviderTrade,获取tradeId
        if (StringUtils.isNotBlank(tradeListCriteriaRequest.getTradePageDTO().getProviderTradeId())
                || StringUtils.isNotBlank(tradeListCriteriaRequest.getTradePageDTO().getProviderName())) {
            List<ProviderTrade> providerTrades = providerTradeService.queryAll(
                    ProviderTradeQueryRequest.builder()
                            .providerName(tradeListCriteriaRequest.getTradePageDTO().getProviderName())
                            .id(tradeListCriteriaRequest.getTradePageDTO().getProviderTradeId())
                            .build());

            if (CollectionUtils.isNotEmpty(providerTrades)) {
                List<String> tradeIds = providerTrades.stream()
                        .map(ProviderTrade::getParentId)
                        .collect(Collectors.toList());
                tradeListCriteriaRequest.getTradePageDTO().setIds(tradeIds.toArray(new String[0]));
            } else {

                return BaseResponse.success(
                        TradeListCriteriaResponse.builder()
                                .tradeList(Collections.emptyList())
                                .build());
            }
        }

        tradeListCriteriaRequest.getTradePageDTO().setProviderTradeId(null);
        tradeListCriteriaRequest.getTradePageDTO().setProviderName(null);

        TradeQueryRequest tradeQueryRequest = KsBeanUtil.convert(tradeListCriteriaRequest.getTradePageDTO(), TradeQueryRequest.class);

        // 处理订单类型转换
        if (Objects.nonNull(tradeQueryRequest.getQueryOrderType())) {
            switch (tradeQueryRequest.getQueryOrderType()) {
                case GROUPON:
                    tradeQueryRequest.setGrouponFlag(Boolean.TRUE);
                    break;
                case FLASH_SALE:
                    tradeQueryRequest.setFlashSaleFlag(Boolean.TRUE);
                    break;
                case BOOKING_SALE:
                    tradeQueryRequest.setBookingSaleFlag(Boolean.TRUE);
                    break;
            }
        }

        // 处理渠道待处理状态
        if (Boolean.TRUE.equals(tradeQueryRequest.getThirdPlatformToDo())) {
            tradeQueryRequest.setFlowStates(Arrays.asList(FlowState.AUDIT, FlowState.DELIVERED_PART));
            tradeQueryRequest.setReturnHasFlag(Boolean.FALSE);
        }

        Criteria criteria = tradeQueryRequest.getWhereCriteria();
        List<Trade> trades = tradeService.findList(criteria, tradeQueryRequest);  // 使用新的无分页查询方法
        List<TradeVO> tradeVOS = KsBeanUtil.copyListProperties(trades, TradeVO.class);

        if (CollectionUtils.isNotEmpty(tradeVOS)) {
            // 填充团长名称
            if (Boolean.TRUE.equals(tradeListCriteriaRequest.getTradePageDTO().getFillLeaderNameFlag())) {
                this.fillLeaderName(tradeVOS);
            }

            // 处理售后订单信息
            List<String> providerTradeIds = tradeVOS.stream()
                    .map(TradeVO::getId)
                    .collect(Collectors.toList());

            Map<String, List<String>> returnOrderIdMap = returnOrderService.getReturnOrderIdMap(providerTradeIds);

            tradeVOS.forEach(tradeVO -> {
                List<String> returnOrderIdList = returnOrderIdMap.get(tradeVO.getId());
                if (CollectionUtils.isNotEmpty(returnOrderIdList)) {
                    tradeVO.setReturnOrderIdList(returnOrderIdList);
                    tradeVO.setIsHasPostSales(Boolean.TRUE);
                }
                tradeVO.setIsReturn(tradeService.verifyAfterProcessing(tradeVO.getId()));
            });

            // 查询子订单信息
            List<ProviderTrade> providerTradeList = providerTradeService.queryAll(
                    ProviderTradeQueryRequest.builder()
                            .parentIds(providerTradeIds)
                            .build());

            if (CollectionUtils.isNotEmpty(providerTradeList)) {
                tradeVOS.forEach(vo -> {
                    List<TradeVO> items = providerTradeList.stream()
                            .filter(item -> vo.getId().equals(item.getParentId()))
                            .map(item -> KsBeanUtil.convert(item, TradeVO.class))
                            .sorted((o1, o2) ->
                                    Objects.isNull(o1.getThirdPlatformType()) ? -1 :
                                            Objects.isNull(o2.getThirdPlatformType()) ? 1 :
                                                    o1.getThirdPlatformType().compareTo(o2.getThirdPlatformType()))
                            .collect(Collectors.toList());

                    vo.setTradeVOList(items);
                });

                // 设置是否包含特定类型订单
                tradeVOS.forEach(tradeVO -> {
                    Boolean isContainsTrade = Boolean.FALSE;
                    if (CollectionUtils.isNotEmpty(tradeVO.getTradeVOList())) {
                        List<Long> storeList = tradeVO.getTradeVOList().stream()
                                .map(TradeVO::getStoreId)
                                .collect(Collectors.toList());
                        isContainsTrade = storeList.contains(null);
                    }
                    tradeVO.setIsContainsTrade(isContainsTrade);
                });
            }

            // 补充支付流水号信息
            List<String> businessIdList = tradeVOS.stream().map(TradeVO::getId).collect(Collectors.toList());
            // 支付信息查询
            Map<String, String> businessIdMap = payTradeRecordService.queryTradeNoMapByBusinessIds(businessIdList);
            if (WmCollectionUtils.isNotEmpty(businessIdMap)) {
                tradeVOS.stream().forEach(tradeVO -> {
                    tradeVO.setTradeNo((businessIdMap.get(tradeVO.getId())));
                });
            }

//            // 补充openid 信息
//            List<String> customerIdList = new ArrayList<>();
//            tradeVOS.stream().forEach(tradeVO -> {
//                if (tradeVO.getBuyer() != null && StringUtils.isNotEmpty(tradeVO.getBuyer().getId())) {
//                    customerIdList.add(tradeVO.getBuyer().getId());
//                }
//            });

            // 补充商品信息 信息
            List<String> skuIdList = new ArrayList<>();
            tradeVOS.stream().forEach(tradeVO -> {
                if (CollectionUtils.isNotEmpty(tradeVO.getTradeItems())) {
                    tradeVO.getTradeItems().stream().forEach(tradeItemVO -> {
                        skuIdList.add(tradeItemVO.getSkuId());
                    });

                    TradeGetGoodsRequest tradeGetGoodsRequest = TradeGetGoodsRequest.builder()
                            .skuIds(skuIdList)
                            .build();
                    BaseResponse<TradeGetGoodsResponse> goods = getGoods(tradeGetGoodsRequest);
                    goods.getContext().getGoodsInfos().stream().forEach(goodsInfo -> {
                        tradeVO.getTradeItems().stream().forEach(tradeItemVO -> {
                            if (goodsInfo.getGoodsInfoId().equals(tradeItemVO.getSkuId())) {
                                tradeItemVO.setPic(goodsInfo.getGoodsInfoImg());
                            }
                        });
                    });

                }
            });

        }

        return BaseResponse.success(
                TradeListCriteriaResponse.builder().tradeList(tradeVOS).build());

    }
    @Override
    public BaseResponse<TradeListAllResponse> getListByCustomerId(CustomerTradeListRequest tradeListAllRequest) {
        TradeQueryRequest tradeQueryRequest = TradeQueryRequest.builder()
                .customerIds(new Object[]{tradeListAllRequest.getCustomerId()})
                .build();
        List<Trade> tradeList =
                tradeService.queryAll(tradeQueryRequest);
        List<TradeVO> collect = tradeList.stream().map(trade -> KsBeanUtil.convert(trade, TradeVO.class))
                .collect(Collectors.toList());

        return BaseResponse.success(
                TradeListAllResponse.builder().tradeVOList(collect).build());
    }

    @Override
    public BaseResponse<TradeGetByIdResponse> getByIdForDeliver(TradeGetByIdRequest tradeGetByIdRequest) {
        String tid = tradeGetByIdRequest.getTid();

        Trade trade = tradeService.detail(tid);
        if (Objects.isNull(trade)) {
            return BaseResponse.success(
                    TradeGetByIdResponse.builder().tradeDeliverVO(new TradeDeliverVO()).build());
        }
        TradeDeliver tradeDeliver = new TradeDeliver();
        TradeBatchDeliverDTO batchDeliverDTO = new TradeBatchDeliverDTO();
        tradeOptimizeService.wrapTradeDeliverInfo(trade, tradeDeliver, batchDeliverDTO);
        TradeDeliverVO tradeDeliverVO = KsBeanUtil.convert(tradeDeliver, TradeDeliverVO.class);
        return BaseResponse.success(TradeGetByIdResponse.builder().tradeDeliverVO(tradeDeliverVO).build());
    }

    @Override
    public BaseResponse<List<String>> findExpiredAppointmentTradeIds(@RequestBody AppointmentShipmentQueryRequest appointmentShipmentQueryRequest){
        List<String> trades =tradeService.findExpiredAppointmentTradeIds(appointmentShipmentQueryRequest.getStartTime(), appointmentShipmentQueryRequest.getEndTime());
        return BaseResponse.success(trades);
    }
}
