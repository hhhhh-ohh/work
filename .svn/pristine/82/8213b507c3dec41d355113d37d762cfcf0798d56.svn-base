package com.wanmi.sbc.order.provider.impl.orderperformance;

import com.wanmi.sbc.common.base.BaseResponse;
import com.wanmi.sbc.common.base.MicroServicePage;
import com.wanmi.sbc.common.util.KsBeanUtil;
import com.wanmi.sbc.customer.api.provider.agent.AgentQueryProvider;
import com.wanmi.sbc.customer.api.provider.detail.CustomerDetailQueryProvider;
import com.wanmi.sbc.customer.api.request.agent.GetAgentRequest;
import com.wanmi.sbc.customer.api.request.detail.CustomerDetailListByAgentUniqueCodeRequest;
import com.wanmi.sbc.customer.api.response.agent.GetAgentResponse;
import com.wanmi.sbc.customer.api.response.detail.CustomerDetailListByConditionResponse;
import com.wanmi.sbc.customer.bean.vo.CustomerDetailVO;
import com.wanmi.sbc.goods.bean.vo.DistributorGoodsInfoVO;
import com.wanmi.sbc.order.api.provider.orderperformance.OrderPerformanceQueryProvider;
import com.wanmi.sbc.order.api.request.orderperformance.OrderPerformanceByUniqueCodesRequest;
import com.wanmi.sbc.order.api.request.orderperformance.OrderPerformanceModifyRequest;
import com.wanmi.sbc.order.api.request.orderperformance.OrderPerformancePageRequest;
import com.wanmi.sbc.order.api.request.orderperformance.OrderPerformanceSummaryRequest;
import com.wanmi.sbc.order.api.response.orderperformance.GetSchooluUniformSalesDataResponse;
import com.wanmi.sbc.order.api.response.orderperformance.OrderPerformanceSummaryNewResponse;
import com.wanmi.sbc.order.api.response.orderperformance.OrderPerformanceSummaryResponse;
import com.wanmi.sbc.order.bean.vo.OrderPerformanceVO;
import com.wanmi.sbc.order.orderperformance.model.root.OrderPerformance;
import com.wanmi.sbc.order.orderperformance.model.root.OrderPerformanceDetail;
import com.wanmi.sbc.order.orderperformance.service.OrderPerformanceDetailService;
import com.wanmi.sbc.order.orderperformance.service.OrderPerformanceService;
import com.wanmi.sbc.order.returnorder.model.root.ReturnOrder;
import com.wanmi.sbc.order.returnorder.service.ReturnOrderService;
import com.wanmi.sbc.order.trade.model.root.Trade;
import com.wanmi.sbc.order.trade.service.TradeService;
import jakarta.validation.Valid;
import org.apache.commons.collections4.CollectionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * @Author: ZhangLingKe
 * @Description:
 * @Date: 2018-12-03 10:44
 */
@Validated
@RestController
public class OrderPerformanceQueryController implements OrderPerformanceQueryProvider {

    @Autowired
    private OrderPerformanceService orderPerformanceService;

    @Autowired
    private OrderPerformanceDetailService orderPerformanceDetailService;

    @Autowired
    private AgentQueryProvider agentQueryProvider;

    @Autowired
    private CustomerDetailQueryProvider customerDetailQueryProvider;

    @Autowired
    private TradeService tradeService;

    @Autowired
    private ReturnOrderService returnOrderService;




    @Override
    public BaseResponse<OrderPerformanceSummaryResponse> getOrderPerformanceSummary(@RequestBody @Valid OrderPerformanceSummaryRequest request) {
        OrderPerformanceSummaryResponse response = new OrderPerformanceSummaryResponse();

        List<OrderPerformance> orderPerformanceList = orderPerformanceService.findByAgentUniqueCode(request.getAgentUniqueCode());
        if (CollectionUtils.isEmpty(orderPerformanceList)) {
            // 如果没有找到订单业绩数据，返回默认值
            response.setCumulativeIncome(BigDecimal.ZERO);
            response.setCumulativeOrderCount(0);
            response.setPendingSettlementIncome(BigDecimal.ZERO);
            response.setPendingSettlementOrderCount(0);
            response.setWithDrawIncome(BigDecimal.ZERO);
            response.setTotalOrderCount(0);
            response.setTotalSalesAmount(BigDecimal.ZERO);
            response.setWithDrawAmount(BigDecimal.ZERO);
            response.setAvailableWithDrawAmount(BigDecimal.ZERO);
        } else {
            // 计算各种统计数据
            // 累计收益
            BigDecimal cumulativeIncome = orderPerformanceList.stream().map(OrderPerformance::getCommissionAmount).reduce(BigDecimal.ZERO, BigDecimal::add);
            // 累计订单数
            Integer cumulativeOrderCount = orderPerformanceList.size();
            // 待结算收益
            BigDecimal pendingSettlementIncome = orderPerformanceList.stream().filter(p -> p.getOrderStatus() != null && p.getOrderStatus() == 1).map(OrderPerformance::getCommissionAmount).reduce(BigDecimal.ZERO, BigDecimal::add);
            // 待结算订单数
            Integer pendingSettlementOrderCount = (int) orderPerformanceList.stream().filter(p -> p.getOrderStatus() != null && p.getOrderStatus() == 1).count();
            // 可提现收益
            BigDecimal withDrawIncome = BigDecimal.ZERO;


            // 订单总数
            Integer totalOrderCount = orderPerformanceList.size();
            // 总销售额
            BigDecimal totalSalesAmount = orderPerformanceList.stream().map(OrderPerformance::getOrderAmount).reduce(BigDecimal.ZERO, BigDecimal::add);
            // 已提现金额
            BigDecimal withDrawAmount = BigDecimal.ZERO;
            // 可提现金额
            BigDecimal availableWithDrawAmount = BigDecimal.ZERO;




            // 设置响应数据
            response.setCumulativeIncome(cumulativeIncome);
            response.setCumulativeOrderCount(cumulativeOrderCount);
            response.setPendingSettlementIncome(pendingSettlementIncome);
            response.setPendingSettlementOrderCount(pendingSettlementOrderCount);
            response.setWithDrawIncome(withDrawIncome);
            response.setTotalOrderCount(totalOrderCount);
            response.setTotalSalesAmount(totalSalesAmount);
            response.setWithDrawAmount(withDrawAmount);
            response.setAvailableWithDrawAmount(availableWithDrawAmount);
        }


        return BaseResponse.success(response);
    }

    @Override
    public BaseResponse<MicroServicePage<OrderPerformanceVO>> getOrderPerformancePage(@RequestBody @Valid OrderPerformancePageRequest request) {

        Page<OrderPerformance> page = orderPerformanceService.getOrderPerformancePage(request.getAgentUniqueCode(), request.getPageable());

        if (CollectionUtils.isEmpty(page.getContent())) {
            return BaseResponse.success(new MicroServicePage<>());
        }


        MicroServicePage<OrderPerformanceVO> microServicePage = KsBeanUtil.convertPage(page,
                OrderPerformanceVO.class);

        // 设置标题
        microServicePage.getContent().forEach(orderPerformanceVO -> {
            orderPerformanceVO.setTitle("校服订单");
        });
        
        // 设置退款类型
        List<String> orderIdList = microServicePage.getContent().stream().map(OrderPerformanceVO::getOrderId).collect(Collectors.toList());
        // 获取订单业绩明细列表
        List<OrderPerformanceDetail> orderPerformanceDetailList = orderPerformanceDetailService.findByOrderIdIn(orderIdList);

        // 创建订单退货映射Map
        Map<String, Boolean> orderReturnMap = new HashMap<>();

        // 初始化所有订单为无退货状态
        orderIdList.forEach(orderId -> orderReturnMap.put(orderId, false));

        // 遍历订单业绩明细列表，标记有退货的订单
        orderPerformanceDetailList.forEach(detail -> {
            if (detail.getDetailType() != null && detail.getDetailType() == 2) {
                orderReturnMap.put(detail.getOrderId(), true);
            }
        });
        //从明细里面统计金额
        for (OrderPerformanceVO orderPerformanceVO : microServicePage.getContent()) {
            List<OrderPerformanceDetail> orderPerformanceDetailTemps = orderPerformanceDetailList.stream().filter(detail -> detail.getOrderId().equals(orderPerformanceVO.getOrderId())).collect(Collectors.toList());
            BigDecimal totalUniformAmount = orderPerformanceDetailTemps.stream()
                    .filter(detail -> detail.getUniformTotalAmount() != null)
                    .map(OrderPerformanceDetail::getUniformTotalAmount)
                    .reduce(BigDecimal.ZERO, BigDecimal::add);
            BigDecimal totalCommissionAmount = orderPerformanceDetailTemps.stream()
                    .filter(detail -> detail.getCommissionAmount() != null)
                    .map(OrderPerformanceDetail::getCommissionAmount)
                    .reduce(BigDecimal.ZERO, BigDecimal::add);
            orderPerformanceVO.setSchoolUniformAmount(totalUniformAmount);
            orderPerformanceVO.setCommissionAmount(totalCommissionAmount);
        }

        // 将退货信息设置到VO中
        microServicePage.getContent().forEach(orderPerformanceVO -> {
            String orderId = orderPerformanceVO.getOrderId();
            if (orderReturnMap.containsKey(orderId) && orderReturnMap.get(orderId)) {
                // 存在退货
                if (BigDecimal.ZERO.compareTo(orderPerformanceVO.getCommissionAmount()) == 0) {
                    // 全部退
                    orderPerformanceVO.setReturnType(1);
                } else {
                    // 部分退
                    orderPerformanceVO.setReturnType(2);
                }
            } else {
                // 不存在退货
                // 正常
                orderPerformanceVO.setReturnType(0);
            }
        });

        return BaseResponse.success(microServicePage);
    }

    @Override
    public BaseResponse<OrderPerformanceSummaryNewResponse> getOrderPerformanceSummaryNew(@RequestBody @Valid OrderPerformanceSummaryRequest request) {

        OrderPerformanceSummaryNewResponse response = new OrderPerformanceSummaryNewResponse();

        // 查询代理信息
        GetAgentRequest getAgentRequest = new GetAgentRequest();
        getAgentRequest.setAgentUniqueCode(request.getAgentUniqueCode());
        BaseResponse<GetAgentResponse> agentByUniqueCode = agentQueryProvider.getAgentByUniqueCode(getAgentRequest);
        if (!agentByUniqueCode.isSuccess() && agentByUniqueCode.getContext() == null) {
            return BaseResponse.success(response);
        }

        // 代理类型
        Integer type = agentByUniqueCode.getContext().getType();
        response.setType(type);

        // 根据不同的代理类型执行不同的计算逻辑
        switch (type) {
            case 1: // 小B
                calculateForSmallB(request.getAgentUniqueCode(), response);
                break;
            case 2: // 一级代理商
                calculateForFirstLevelAgent(request.getAgentUniqueCode(), response);
                break;
            case 3: // 二级代理商
                calculateForSecondLevelAgent(request.getAgentUniqueCode(), response);
                break;
            case 4: // 一级合作商
                calculateForFirstLevelPartner(request.getAgentUniqueCode(), response);
                break;
            default:
                // 默认处理逻辑
                calculateDefault(request.getAgentUniqueCode(), response);
                break;
        }



        return BaseResponse.success(response);
    }

    /**
     * 小B类型代理的计算逻辑
     */
    private void calculateForSmallB(String agentUniqueCode, OrderPerformanceSummaryNewResponse response) {
        // 累计销售额（校服总金额）
        // 累计收益（佣金总金额）
        // 累计订单数（校服订单数）
        List<OrderPerformance> orderPerformanceList = orderPerformanceService.findByAgentUniqueCode(agentUniqueCode);
        List<OrderPerformanceDetail> orderPerformanceDetailList = orderPerformanceDetailService.findByAgentUniqueCode(agentUniqueCode);
        BigDecimal totalSales = BigDecimal.ZERO;
        BigDecimal totalProfit = BigDecimal.ZERO;
        Integer totalOrderCount = 0;
        if (CollectionUtils.isNotEmpty(orderPerformanceList)) {
            //totalSales = orderPerformanceList.stream().map(OrderPerformance::getSchoolUniformAmount).reduce(BigDecimal.ZERO, BigDecimal::add);
            //totalProfit = orderPerformanceList.stream().map(OrderPerformance::getCommissionAmount).reduce(BigDecimal.ZERO, BigDecimal::add);
            //totalOrderCount = (int)orderPerformanceList.stream().filter(orderPerformance -> orderPerformance.getSchoolUniformAmount().compareTo(BigDecimal.ZERO) != 0).count();
            totalSales = orderPerformanceDetailList.stream().map(OrderPerformanceDetail::getUniformTotalAmount).reduce(BigDecimal.ZERO, BigDecimal::add);
            totalProfit = orderPerformanceDetailList.stream().map(OrderPerformanceDetail::getCommissionAmount).reduce(BigDecimal.ZERO, BigDecimal::add);
            // 使用stream按orderId分组，然后统计commissionAmount各个分组的总金额
            Map<String, BigDecimal> commissionAmountByOrderId = orderPerformanceDetailList.stream()
                    .collect(Collectors.groupingBy(
                            OrderPerformanceDetail::getOrderId,
                            Collectors.mapping(
                                    OrderPerformanceDetail::getCommissionAmount,
                                    Collectors.reducing(BigDecimal.ZERO, BigDecimal::add)
                            )
                    ));
            totalOrderCount =  (int)commissionAmountByOrderId.values().stream()
                    .filter(value -> value != null && value.compareTo(BigDecimal.ZERO) > 0)
                    .count();
        }
        response.setTotalSales(totalSales);
        response.setTotalProfit(totalProfit);
        response.setTotalOrderCount(totalOrderCount);


        // 春秋装累积校服总数（春秋装）
        // 夏装累积校服总数（夏装）
        // 冬装累积校服总数（冬装）
        Integer springAutumnUniformCount = 0;
        Integer summerUniformCount = 0;
        Integer winterUniformCount = 0;
        //List<OrderPerformanceDetail> orderPerformanceDetailList = orderPerformanceDetailService.findByAgentUniqueCode(agentUniqueCode);
        if (CollectionUtils.isNotEmpty(orderPerformanceDetailList)) {
            springAutumnUniformCount = calculateSpringAutumnUniformCount(orderPerformanceDetailList);
            summerUniformCount = calculateSummerUniformCount(orderPerformanceDetailList);
            winterUniformCount = calculateWinterUniformCount(orderPerformanceDetailList);
        }
        response.setSpringAutumnUniformCount(springAutumnUniformCount);
        response.setSummerUniformCount(summerUniformCount);
        response.setWinterUniformCount(winterUniformCount);


        // 用户总数
        CustomerDetailListByAgentUniqueCodeRequest request = new CustomerDetailListByAgentUniqueCodeRequest(agentUniqueCode);
        BaseResponse<CustomerDetailListByConditionResponse> customerDetailListByConditionResponseBaseResponse = customerDetailQueryProvider.listCustomerDetailByAgentUniqueCode(request);
        if (customerDetailListByConditionResponseBaseResponse.getContext() == null){
            response.setUserCount(0);
        } else {
            List<CustomerDetailVO> customerDetailVOList = customerDetailListByConditionResponseBaseResponse.getContext().getCustomerDetailVOList();
            response.setUserCount(customerDetailVOList.size());
        }

    }

    /**
     * 一级代理商的计算逻辑
     */
    private void calculateForFirstLevelAgent(String agentUniqueCode, OrderPerformanceSummaryNewResponse response) {
        response = null;
    }

    /**
     * 二级代理商的计算逻辑
     */
    private void calculateForSecondLevelAgent(String agentUniqueCode, OrderPerformanceSummaryNewResponse response) {
        // 累计销售额（校服总金额）
        // 累计订单数（校服订单数）
        BigDecimal totalSales = BigDecimal.ZERO;
        Integer totalOrderCount = 0;
        List<OrderPerformance> orderPerformanceList = orderPerformanceService.findByAgentUniqueCode(agentUniqueCode);
        List<OrderPerformanceDetail> orderPerformanceDetailList = orderPerformanceDetailService.findByAgentUniqueCode(agentUniqueCode);
        if (CollectionUtils.isNotEmpty(orderPerformanceList)) {
            //totalSales = orderPerformanceList.stream().map(OrderPerformance::getSchoolUniformAmount).reduce(BigDecimal.ZERO, BigDecimal::add);
            //totalOrderCount = (int)orderPerformanceList.stream().filter(orderPerformance -> orderPerformance.getSchoolUniformAmount().compareTo(BigDecimal.ZERO) != 0).count();
            totalSales = orderPerformanceDetailList.stream().map(OrderPerformanceDetail::getUniformTotalAmount).reduce(BigDecimal.ZERO, BigDecimal::add);
            // 使用stream按orderId分组，然后统计commissionAmount各个分组的总金额
            Map<String, BigDecimal> commissionAmountByOrderId = orderPerformanceDetailList.stream()
                    .collect(Collectors.groupingBy(
                            OrderPerformanceDetail::getOrderId,
                            Collectors.mapping(
                                    OrderPerformanceDetail::getCommissionAmount,
                                    Collectors.reducing(BigDecimal.ZERO, BigDecimal::add)
                            )
                    ));
            totalOrderCount =  (int)commissionAmountByOrderId.values().stream()
                    .filter(value -> value != null && value.compareTo(BigDecimal.ZERO) > 0)
                    .count();

        }
        response.setTotalSales(totalSales);
        response.setTotalOrderCount(totalOrderCount);


        // 春秋装累积校服总数（春秋装）
        // 夏装累积校服总数（夏装）
        // 冬装累积校服总数（冬装）
        Integer springAutumnUniformCount = 0;
        Integer summerUniformCount = 0;
        Integer winterUniformCount = 0;
        //List<OrderPerformanceDetail> orderPerformanceDetailList = orderPerformanceDetailService.findByAgentUniqueCode(agentUniqueCode);
        if (CollectionUtils.isNotEmpty(orderPerformanceDetailList)) {
            springAutumnUniformCount = calculateSpringAutumnUniformCount(orderPerformanceDetailList);
            summerUniformCount = calculateSummerUniformCount(orderPerformanceDetailList);
            winterUniformCount = calculateWinterUniformCount(orderPerformanceDetailList);
        }
        response.setSpringAutumnUniformCount(springAutumnUniformCount);
        response.setSummerUniformCount(summerUniformCount);
        response.setWinterUniformCount(winterUniformCount);


        // 待结算订单数
        Integer pendingSettlementOrderCount = 0;
        // 待结算收益
        BigDecimal pendingSettlementProfit = BigDecimal.ZERO;
        // 可提现收益
        BigDecimal withDrawableProfit = BigDecimal.ZERO;

        response.setPendingSettlementOrderCount(pendingSettlementOrderCount);
        response.setPendingSettlementProfit(pendingSettlementProfit);
        response.setWithDrawableProfit(withDrawableProfit);


        // 用户总数
        CustomerDetailListByAgentUniqueCodeRequest request = new CustomerDetailListByAgentUniqueCodeRequest(agentUniqueCode);
        BaseResponse<CustomerDetailListByConditionResponse> customerDetailListByConditionResponseBaseResponse = customerDetailQueryProvider.listCustomerDetailByAgentUniqueCode(request);
        if (customerDetailListByConditionResponseBaseResponse.getContext() == null){
            response.setUserCount(0);
        } else {
            List<CustomerDetailVO> customerDetailVOList = customerDetailListByConditionResponseBaseResponse.getContext().getCustomerDetailVOList();
            response.setUserCount(customerDetailVOList.size());
        }
    }

    /**
     * 计算冬装累积校服总数
     */
    private Integer calculateWinterUniformCount(List<OrderPerformanceDetail> orderPerformanceDetailList) {
        Integer winterUniformCount = 0;
        for (OrderPerformanceDetail p : orderPerformanceDetailList) {
            if (p.getSeason().equals("冬装")) {
                if (p.getDetailType().equals(1)) {
                    // 购买
                    String clothingTypes = p.getClothingTypes();
                    Integer quantity = p.getQuantity();
                    List<String> list = Arrays.asList(clothingTypes.split(","));
                    Integer addCount = list.size() * quantity;
                    winterUniformCount = winterUniformCount + addCount;

                } else if (p.getDetailType().equals(2)) {
                    // 退货
                    String clothingTypes = p.getClothingTypes();
                    Integer quantity = p.getQuantity();
                    List<String> list = Arrays.asList(clothingTypes.split(","));
                    Integer subCount = list.size() * quantity;
                    winterUniformCount = winterUniformCount - subCount;
                }
            }
        }
        return winterUniformCount;
    }

    /**
     * 计算夏装累积校服总数
     */
    private Integer calculateSummerUniformCount(List<OrderPerformanceDetail> orderPerformanceDetailList) {
        Integer summerUniformCount = 0;
        for (OrderPerformanceDetail p : orderPerformanceDetailList) {
            if (p.getSeason().equals("夏装")) {
                if (p.getDetailType().equals(1)) {
                    // 购买
                    String clothingTypes = p.getClothingTypes();
                    Integer quantity = p.getQuantity();
                    List<String> list = Arrays.asList(clothingTypes.split(","));
                    Integer addCount = list.size() * quantity;
                    summerUniformCount = summerUniformCount + addCount;

                } else if (p.getDetailType().equals(2)) {
                    // 退货
                    String clothingTypes = p.getClothingTypes();
                    Integer quantity = p.getQuantity();
                    List<String> list = Arrays.asList(clothingTypes.split(","));
                    Integer subCount = list.size() * quantity;
                    summerUniformCount = summerUniformCount - subCount;
                }
            }
        }
        return summerUniformCount;
    }

    /**
     * 计算春秋装累积校服总数
     */
    private Integer calculateSpringAutumnUniformCount(List<OrderPerformanceDetail> orderPerformanceDetailList) {
        Integer springAutumnUniformCount = 0;
        for (OrderPerformanceDetail p : orderPerformanceDetailList) {
            if (p.getSeason().equals("春秋装")) {
                if (p.getDetailType().equals(1)) {
                    // 购买
                    String clothingTypes = p.getClothingTypes();
                    Integer quantity = p.getQuantity();
                    List<String> list = Arrays.asList(clothingTypes.split(","));
                    Integer addCount = list.size() * quantity;
                    springAutumnUniformCount = springAutumnUniformCount + addCount;

                } else if (p.getDetailType().equals(2)) {
                    // 退货
                    String clothingTypes = p.getClothingTypes();
                    Integer quantity = p.getQuantity();
                    List<String> list = Arrays.asList(clothingTypes.split(","));
                    Integer subCount = list.size() * quantity;
                    springAutumnUniformCount = springAutumnUniformCount - subCount;
                }
            }
        }
        return springAutumnUniformCount;
    }

    /**
     * 一级合作商的计算逻辑
     */
    private void calculateForFirstLevelPartner(String agentUniqueCode, OrderPerformanceSummaryNewResponse response) {
        response = null;
    }


    /**
     * 默认计算逻辑
     */
    private void calculateDefault(String agentUniqueCode, OrderPerformanceSummaryNewResponse response) {
        response = null;
    }


    @Override
    public BaseResponse createOrderPerformance(@RequestBody @Valid OrderPerformanceModifyRequest request) {
        Trade trade = tradeService.detail(request.getId());
        if (trade != null) {
            orderPerformanceService.createOrderPerformance(trade);
        }
        return BaseResponse.SUCCESSFUL();
    }

    @Override
    public BaseResponse returnOrderPerformance(@RequestBody @Valid OrderPerformanceModifyRequest request) {

        List<ReturnOrder> returnOrderList = returnOrderService.findByTid(request.getId());
        if (CollectionUtils.isNotEmpty(returnOrderList)) {
            returnOrderList.forEach(returnOrder -> orderPerformanceService.returnOrderPerformance(returnOrder));
        }
        return BaseResponse.SUCCESSFUL();
    }

    @Override
    public BaseResponse<List<GetSchooluUniformSalesDataResponse>> getSchooluUniformSalesData(@RequestBody OrderPerformanceByUniqueCodesRequest request){
        List<GetSchooluUniformSalesDataResponse> getSchooluUniformSalesDataResponseList = orderPerformanceDetailService.getSchooluUniformSalesData(request);
        return BaseResponse.success(getSchooluUniformSalesDataResponseList);
    }
}
